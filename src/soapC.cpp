/* soapC.cpp
   Generated by gSOAP 2.8.14 from soap1.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.14 2016-06-14 07:53:18 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns21__addSendinfoResponse:
		return soap_in_ns21__addSendinfoResponse(soap, NULL, NULL, "ns21:addSendinfoResponse");
	case SOAP_TYPE_ns21__addSendinfo:
		return soap_in_ns21__addSendinfo(soap, NULL, NULL, "ns21:addSendinfo");
	case SOAP_TYPE_ns21__addNodeResponse:
		return soap_in_ns21__addNodeResponse(soap, NULL, NULL, "ns21:addNodeResponse");
	case SOAP_TYPE_ns21__addNode:
		return soap_in_ns21__addNode(soap, NULL, NULL, "ns21:addNode");
	case SOAP_TYPE_ns21__dispenseResponse:
		return soap_in_ns21__dispenseResponse(soap, NULL, NULL, "ns21:dispenseResponse");
	case SOAP_TYPE_ns21__dispense:
		return soap_in_ns21__dispense(soap, NULL, NULL, "ns21:dispense");
	case SOAP_TYPE_ns21__getSendinfoResponse:
		return soap_in_ns21__getSendinfoResponse(soap, NULL, NULL, "ns21:getSendinfoResponse");
	case SOAP_TYPE_ns21__getSendinfo:
		return soap_in_ns21__getSendinfo(soap, NULL, NULL, "ns21:getSendinfo");
	case SOAP_TYPE_ns21__TransferResultSecondResponse:
		return soap_in_ns21__TransferResultSecondResponse(soap, NULL, NULL, "ns21:TransferResultSecondResponse");
	case SOAP_TYPE_ns21__TransferResultSecond:
		return soap_in_ns21__TransferResultSecond(soap, NULL, NULL, "ns21:TransferResultSecond");
	case SOAP_TYPE_ns21__transferResultResponse:
		return soap_in_ns21__transferResultResponse(soap, NULL, NULL, "ns21:transferResultResponse");
	case SOAP_TYPE_ns21__transferResult:
		return soap_in_ns21__transferResult(soap, NULL, NULL, "ns21:transferResult");
	case SOAP_TYPE_ns21__WNode:
		return soap_in_ns21__WNode(soap, NULL, NULL, "ns21:WNode");
	case SOAP_TYPE_ns21__PackInfo:
		return soap_in_ns21__PackInfo(soap, NULL, NULL, "ns21:PackInfo");
	case SOAP_TYPE_ns21__SendinfoTask:
		return soap_in_ns21__SendinfoTask(soap, NULL, NULL, "ns21:SendinfoTask");
	case SOAP_TYPE_ns1__maketo:
		return soap_in_ns1__maketo(soap, NULL, NULL, "ns1:maketo");
	case SOAP_TYPE_ns1__maketoResponse:
		return soap_in_ns1__maketoResponse(soap, NULL, NULL, "ns1:maketoResponse");
	case SOAP_TYPE_ns1__getTempPackage:
		return soap_in_ns1__getTempPackage(soap, NULL, NULL, "ns1:getTempPackage");
	case SOAP_TYPE_ns1__getTempPackageResponse:
		return soap_in_ns1__getTempPackageResponse(soap, NULL, NULL, "ns1:getTempPackageResponse");
	case SOAP_TYPE_ns1__deletePackage:
		return soap_in_ns1__deletePackage(soap, NULL, NULL, "ns1:deletePackage");
	case SOAP_TYPE_ns1__deletePackageResponse:
		return soap_in_ns1__deletePackageResponse(soap, NULL, NULL, "ns1:deletePackageResponse");
	case SOAP_TYPE_ns1__getUsableSpace:
		return soap_in_ns1__getUsableSpace(soap, NULL, NULL, "ns1:getUsableSpace");
	case SOAP_TYPE_ns1__getUsableSpaceResponse:
		return soap_in_ns1__getUsableSpaceResponse(soap, NULL, NULL, "ns1:getUsableSpaceResponse");
	case SOAP_TYPE_ns1__cutPackage:
		return soap_in_ns1__cutPackage(soap, NULL, NULL, "ns1:cutPackage");
	case SOAP_TYPE_ns1__cutPackageResponse:
		return soap_in_ns1__cutPackageResponse(soap, NULL, NULL, "ns1:cutPackageResponse");
	case SOAP_TYPE_ns1__transfer:
		return soap_in_ns1__transfer(soap, NULL, NULL, "ns1:transfer");
	case SOAP_TYPE_ns1__transferResponse:
		return soap_in_ns1__transferResponse(soap, NULL, NULL, "ns1:transferResponse");
	case SOAP_TYPE_ns1__isPackExist:
		return soap_in_ns1__isPackExist(soap, NULL, NULL, "ns1:isPackExist");
	case SOAP_TYPE_ns1__isPackExistResponse:
		return soap_in_ns1__isPackExistResponse(soap, NULL, NULL, "ns1:isPackExistResponse");
	case SOAP_TYPE_ns1__InterfaceParameter:
		return soap_in_ns1__InterfaceParameter(soap, NULL, NULL, "ns1:InterfaceParameter");
	case SOAP_TYPE_PointerTons21__addSendinfoResponse:
		return soap_in_PointerTons21__addSendinfoResponse(soap, NULL, NULL, "ns21:addSendinfoResponse");
	case SOAP_TYPE_PointerTons21__addSendinfo:
		return soap_in_PointerTons21__addSendinfo(soap, NULL, NULL, "ns21:addSendinfo");
	case SOAP_TYPE_PointerTons21__addNodeResponse:
		return soap_in_PointerTons21__addNodeResponse(soap, NULL, NULL, "ns21:addNodeResponse");
	case SOAP_TYPE_PointerTons21__addNode:
		return soap_in_PointerTons21__addNode(soap, NULL, NULL, "ns21:addNode");
	case SOAP_TYPE_PointerTons21__dispenseResponse:
		return soap_in_PointerTons21__dispenseResponse(soap, NULL, NULL, "ns21:dispenseResponse");
	case SOAP_TYPE_PointerTons21__dispense:
		return soap_in_PointerTons21__dispense(soap, NULL, NULL, "ns21:dispense");
	case SOAP_TYPE_PointerTons21__getSendinfoResponse:
		return soap_in_PointerTons21__getSendinfoResponse(soap, NULL, NULL, "ns21:getSendinfoResponse");
	case SOAP_TYPE_PointerTons21__getSendinfo:
		return soap_in_PointerTons21__getSendinfo(soap, NULL, NULL, "ns21:getSendinfo");
	case SOAP_TYPE_PointerTons21__TransferResultSecondResponse:
		return soap_in_PointerTons21__TransferResultSecondResponse(soap, NULL, NULL, "ns21:TransferResultSecondResponse");
	case SOAP_TYPE_PointerTons21__TransferResultSecond:
		return soap_in_PointerTons21__TransferResultSecond(soap, NULL, NULL, "ns21:TransferResultSecond");
	case SOAP_TYPE_PointerTons21__transferResultResponse:
		return soap_in_PointerTons21__transferResultResponse(soap, NULL, NULL, "ns21:transferResultResponse");
	case SOAP_TYPE_PointerTons21__transferResult:
		return soap_in_PointerTons21__transferResult(soap, NULL, NULL, "ns21:transferResult");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTons21__WNode:
		return soap_in_PointerTons21__WNode(soap, NULL, NULL, "ns21:WNode");
	case SOAP_TYPE_PointerTons21__PackInfo:
		return soap_in_PointerTons21__PackInfo(soap, NULL, NULL, "ns21:PackInfo");
	case SOAP_TYPE_PointerTons21__SendinfoTask:
		return soap_in_PointerTons21__SendinfoTask(soap, NULL, NULL, "ns21:SendinfoTask");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:addSendinfoResponse"))
		{	*type = SOAP_TYPE_ns21__addSendinfoResponse;
			return soap_in_ns21__addSendinfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:addSendinfo"))
		{	*type = SOAP_TYPE_ns21__addSendinfo;
			return soap_in_ns21__addSendinfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:addNodeResponse"))
		{	*type = SOAP_TYPE_ns21__addNodeResponse;
			return soap_in_ns21__addNodeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:addNode"))
		{	*type = SOAP_TYPE_ns21__addNode;
			return soap_in_ns21__addNode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:dispenseResponse"))
		{	*type = SOAP_TYPE_ns21__dispenseResponse;
			return soap_in_ns21__dispenseResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:dispense"))
		{	*type = SOAP_TYPE_ns21__dispense;
			return soap_in_ns21__dispense(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:getSendinfoResponse"))
		{	*type = SOAP_TYPE_ns21__getSendinfoResponse;
			return soap_in_ns21__getSendinfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:getSendinfo"))
		{	*type = SOAP_TYPE_ns21__getSendinfo;
			return soap_in_ns21__getSendinfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:TransferResultSecondResponse"))
		{	*type = SOAP_TYPE_ns21__TransferResultSecondResponse;
			return soap_in_ns21__TransferResultSecondResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:TransferResultSecond"))
		{	*type = SOAP_TYPE_ns21__TransferResultSecond;
			return soap_in_ns21__TransferResultSecond(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:transferResultResponse"))
		{	*type = SOAP_TYPE_ns21__transferResultResponse;
			return soap_in_ns21__transferResultResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:transferResult"))
		{	*type = SOAP_TYPE_ns21__transferResult;
			return soap_in_ns21__transferResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:WNode"))
		{	*type = SOAP_TYPE_ns21__WNode;
			return soap_in_ns21__WNode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:PackInfo"))
		{	*type = SOAP_TYPE_ns21__PackInfo;
			return soap_in_ns21__PackInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns21:SendinfoTask"))
		{	*type = SOAP_TYPE_ns21__SendinfoTask;
			return soap_in_ns21__SendinfoTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:maketo"))
		{	*type = SOAP_TYPE_ns1__maketo;
			return soap_in_ns1__maketo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:maketoResponse"))
		{	*type = SOAP_TYPE_ns1__maketoResponse;
			return soap_in_ns1__maketoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getTempPackage"))
		{	*type = SOAP_TYPE_ns1__getTempPackage;
			return soap_in_ns1__getTempPackage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getTempPackageResponse"))
		{	*type = SOAP_TYPE_ns1__getTempPackageResponse;
			return soap_in_ns1__getTempPackageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deletePackage"))
		{	*type = SOAP_TYPE_ns1__deletePackage;
			return soap_in_ns1__deletePackage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deletePackageResponse"))
		{	*type = SOAP_TYPE_ns1__deletePackageResponse;
			return soap_in_ns1__deletePackageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getUsableSpace"))
		{	*type = SOAP_TYPE_ns1__getUsableSpace;
			return soap_in_ns1__getUsableSpace(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getUsableSpaceResponse"))
		{	*type = SOAP_TYPE_ns1__getUsableSpaceResponse;
			return soap_in_ns1__getUsableSpaceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:cutPackage"))
		{	*type = SOAP_TYPE_ns1__cutPackage;
			return soap_in_ns1__cutPackage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:cutPackageResponse"))
		{	*type = SOAP_TYPE_ns1__cutPackageResponse;
			return soap_in_ns1__cutPackageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:transfer"))
		{	*type = SOAP_TYPE_ns1__transfer;
			return soap_in_ns1__transfer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:transferResponse"))
		{	*type = SOAP_TYPE_ns1__transferResponse;
			return soap_in_ns1__transferResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:isPackExist"))
		{	*type = SOAP_TYPE_ns1__isPackExist;
			return soap_in_ns1__isPackExist(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:isPackExistResponse"))
		{	*type = SOAP_TYPE_ns1__isPackExistResponse;
			return soap_in_ns1__isPackExistResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:InterfaceParameter"))
		{	*type = SOAP_TYPE_ns1__InterfaceParameter;
			return soap_in_ns1__InterfaceParameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns21__addSendinfoResponse:
		return ((ns21__addSendinfoResponse *)ptr)->soap_out(soap, tag, id, "ns21:addSendinfoResponse");
	case SOAP_TYPE_ns21__addSendinfo:
		return ((ns21__addSendinfo *)ptr)->soap_out(soap, tag, id, "ns21:addSendinfo");
	case SOAP_TYPE_ns21__addNodeResponse:
		return ((ns21__addNodeResponse *)ptr)->soap_out(soap, tag, id, "ns21:addNodeResponse");
	case SOAP_TYPE_ns21__addNode:
		return ((ns21__addNode *)ptr)->soap_out(soap, tag, id, "ns21:addNode");
	case SOAP_TYPE_ns21__dispenseResponse:
		return ((ns21__dispenseResponse *)ptr)->soap_out(soap, tag, id, "ns21:dispenseResponse");
	case SOAP_TYPE_ns21__dispense:
		return ((ns21__dispense *)ptr)->soap_out(soap, tag, id, "ns21:dispense");
	case SOAP_TYPE_ns21__getSendinfoResponse:
		return ((ns21__getSendinfoResponse *)ptr)->soap_out(soap, tag, id, "ns21:getSendinfoResponse");
	case SOAP_TYPE_ns21__getSendinfo:
		return ((ns21__getSendinfo *)ptr)->soap_out(soap, tag, id, "ns21:getSendinfo");
	case SOAP_TYPE_ns21__TransferResultSecondResponse:
		return ((ns21__TransferResultSecondResponse *)ptr)->soap_out(soap, tag, id, "ns21:TransferResultSecondResponse");
	case SOAP_TYPE_ns21__TransferResultSecond:
		return ((ns21__TransferResultSecond *)ptr)->soap_out(soap, tag, id, "ns21:TransferResultSecond");
	case SOAP_TYPE_ns21__transferResultResponse:
		return ((ns21__transferResultResponse *)ptr)->soap_out(soap, tag, id, "ns21:transferResultResponse");
	case SOAP_TYPE_ns21__transferResult:
		return ((ns21__transferResult *)ptr)->soap_out(soap, tag, id, "ns21:transferResult");
	case SOAP_TYPE_ns21__WNode:
		return ((ns21__WNode *)ptr)->soap_out(soap, tag, id, "ns21:WNode");
	case SOAP_TYPE_ns21__PackInfo:
		return ((ns21__PackInfo *)ptr)->soap_out(soap, tag, id, "ns21:PackInfo");
	case SOAP_TYPE_ns21__SendinfoTask:
		return ((ns21__SendinfoTask *)ptr)->soap_out(soap, tag, id, "ns21:SendinfoTask");
	case SOAP_TYPE_ns1__maketo:
		return soap_out_ns1__maketo(soap, tag, id, (const struct ns1__maketo *)ptr, "ns1:maketo");
	case SOAP_TYPE_ns1__maketoResponse:
		return soap_out_ns1__maketoResponse(soap, tag, id, (const struct ns1__maketoResponse *)ptr, "ns1:maketoResponse");
	case SOAP_TYPE_ns1__getTempPackage:
		return soap_out_ns1__getTempPackage(soap, tag, id, (const struct ns1__getTempPackage *)ptr, "ns1:getTempPackage");
	case SOAP_TYPE_ns1__getTempPackageResponse:
		return soap_out_ns1__getTempPackageResponse(soap, tag, id, (const struct ns1__getTempPackageResponse *)ptr, "ns1:getTempPackageResponse");
	case SOAP_TYPE_ns1__deletePackage:
		return soap_out_ns1__deletePackage(soap, tag, id, (const struct ns1__deletePackage *)ptr, "ns1:deletePackage");
	case SOAP_TYPE_ns1__deletePackageResponse:
		return soap_out_ns1__deletePackageResponse(soap, tag, id, (const struct ns1__deletePackageResponse *)ptr, "ns1:deletePackageResponse");
	case SOAP_TYPE_ns1__getUsableSpace:
		return soap_out_ns1__getUsableSpace(soap, tag, id, (const struct ns1__getUsableSpace *)ptr, "ns1:getUsableSpace");
	case SOAP_TYPE_ns1__getUsableSpaceResponse:
		return soap_out_ns1__getUsableSpaceResponse(soap, tag, id, (const struct ns1__getUsableSpaceResponse *)ptr, "ns1:getUsableSpaceResponse");
	case SOAP_TYPE_ns1__cutPackage:
		return soap_out_ns1__cutPackage(soap, tag, id, (const struct ns1__cutPackage *)ptr, "ns1:cutPackage");
	case SOAP_TYPE_ns1__cutPackageResponse:
		return soap_out_ns1__cutPackageResponse(soap, tag, id, (const struct ns1__cutPackageResponse *)ptr, "ns1:cutPackageResponse");
	case SOAP_TYPE_ns1__transfer:
		return soap_out_ns1__transfer(soap, tag, id, (const struct ns1__transfer *)ptr, "ns1:transfer");
	case SOAP_TYPE_ns1__transferResponse:
		return soap_out_ns1__transferResponse(soap, tag, id, (const struct ns1__transferResponse *)ptr, "ns1:transferResponse");
	case SOAP_TYPE_ns1__isPackExist:
		return soap_out_ns1__isPackExist(soap, tag, id, (const struct ns1__isPackExist *)ptr, "ns1:isPackExist");
	case SOAP_TYPE_ns1__isPackExistResponse:
		return soap_out_ns1__isPackExistResponse(soap, tag, id, (const struct ns1__isPackExistResponse *)ptr, "ns1:isPackExistResponse");
	case SOAP_TYPE_ns1__InterfaceParameter:
		return soap_out_ns1__InterfaceParameter(soap, tag, id, (const struct ns1__InterfaceParameter *)ptr, "ns1:InterfaceParameter");
	case SOAP_TYPE_PointerTons21__addSendinfoResponse:
		return soap_out_PointerTons21__addSendinfoResponse(soap, tag, id, (ns21__addSendinfoResponse *const*)ptr, "ns21:addSendinfoResponse");
	case SOAP_TYPE_PointerTons21__addSendinfo:
		return soap_out_PointerTons21__addSendinfo(soap, tag, id, (ns21__addSendinfo *const*)ptr, "ns21:addSendinfo");
	case SOAP_TYPE_PointerTons21__addNodeResponse:
		return soap_out_PointerTons21__addNodeResponse(soap, tag, id, (ns21__addNodeResponse *const*)ptr, "ns21:addNodeResponse");
	case SOAP_TYPE_PointerTons21__addNode:
		return soap_out_PointerTons21__addNode(soap, tag, id, (ns21__addNode *const*)ptr, "ns21:addNode");
	case SOAP_TYPE_PointerTons21__dispenseResponse:
		return soap_out_PointerTons21__dispenseResponse(soap, tag, id, (ns21__dispenseResponse *const*)ptr, "ns21:dispenseResponse");
	case SOAP_TYPE_PointerTons21__dispense:
		return soap_out_PointerTons21__dispense(soap, tag, id, (ns21__dispense *const*)ptr, "ns21:dispense");
	case SOAP_TYPE_PointerTons21__getSendinfoResponse:
		return soap_out_PointerTons21__getSendinfoResponse(soap, tag, id, (ns21__getSendinfoResponse *const*)ptr, "ns21:getSendinfoResponse");
	case SOAP_TYPE_PointerTons21__getSendinfo:
		return soap_out_PointerTons21__getSendinfo(soap, tag, id, (ns21__getSendinfo *const*)ptr, "ns21:getSendinfo");
	case SOAP_TYPE_PointerTons21__TransferResultSecondResponse:
		return soap_out_PointerTons21__TransferResultSecondResponse(soap, tag, id, (ns21__TransferResultSecondResponse *const*)ptr, "ns21:TransferResultSecondResponse");
	case SOAP_TYPE_PointerTons21__TransferResultSecond:
		return soap_out_PointerTons21__TransferResultSecond(soap, tag, id, (ns21__TransferResultSecond *const*)ptr, "ns21:TransferResultSecond");
	case SOAP_TYPE_PointerTons21__transferResultResponse:
		return soap_out_PointerTons21__transferResultResponse(soap, tag, id, (ns21__transferResultResponse *const*)ptr, "ns21:transferResultResponse");
	case SOAP_TYPE_PointerTons21__transferResult:
		return soap_out_PointerTons21__transferResult(soap, tag, id, (ns21__transferResult *const*)ptr, "ns21:transferResult");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTons21__WNode:
		return soap_out_PointerTons21__WNode(soap, tag, id, (ns21__WNode *const*)ptr, "ns21:WNode");
	case SOAP_TYPE_PointerTons21__PackInfo:
		return soap_out_PointerTons21__PackInfo(soap, tag, id, (ns21__PackInfo *const*)ptr, "ns21:PackInfo");
	case SOAP_TYPE_PointerTons21__SendinfoTask:
		return soap_out_PointerTons21__SendinfoTask(soap, tag, id, (ns21__SendinfoTask *const*)ptr, "ns21:SendinfoTask");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns21__addSendinfoResponse:
		((ns21__addSendinfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__addSendinfo:
		((ns21__addSendinfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__addNodeResponse:
		((ns21__addNodeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__addNode:
		((ns21__addNode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__dispenseResponse:
		((ns21__dispenseResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__dispense:
		((ns21__dispense *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__getSendinfoResponse:
		((ns21__getSendinfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__getSendinfo:
		((ns21__getSendinfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__TransferResultSecondResponse:
		((ns21__TransferResultSecondResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__TransferResultSecond:
		((ns21__TransferResultSecond *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__transferResultResponse:
		((ns21__transferResultResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__transferResult:
		((ns21__transferResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__WNode:
		((ns21__WNode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__PackInfo:
		((ns21__PackInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns21__SendinfoTask:
		((ns21__SendinfoTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__maketo:
		soap_serialize_ns1__maketo(soap, (const struct ns1__maketo *)ptr);
		break;
	case SOAP_TYPE_ns1__maketoResponse:
		soap_serialize_ns1__maketoResponse(soap, (const struct ns1__maketoResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__getTempPackage:
		soap_serialize_ns1__getTempPackage(soap, (const struct ns1__getTempPackage *)ptr);
		break;
	case SOAP_TYPE_ns1__getTempPackageResponse:
		soap_serialize_ns1__getTempPackageResponse(soap, (const struct ns1__getTempPackageResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__deletePackage:
		soap_serialize_ns1__deletePackage(soap, (const struct ns1__deletePackage *)ptr);
		break;
	case SOAP_TYPE_ns1__deletePackageResponse:
		soap_serialize_ns1__deletePackageResponse(soap, (const struct ns1__deletePackageResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__getUsableSpace:
		soap_serialize_ns1__getUsableSpace(soap, (const struct ns1__getUsableSpace *)ptr);
		break;
	case SOAP_TYPE_ns1__getUsableSpaceResponse:
		soap_serialize_ns1__getUsableSpaceResponse(soap, (const struct ns1__getUsableSpaceResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__cutPackage:
		soap_serialize_ns1__cutPackage(soap, (const struct ns1__cutPackage *)ptr);
		break;
	case SOAP_TYPE_ns1__cutPackageResponse:
		soap_serialize_ns1__cutPackageResponse(soap, (const struct ns1__cutPackageResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__transfer:
		soap_serialize_ns1__transfer(soap, (const struct ns1__transfer *)ptr);
		break;
	case SOAP_TYPE_ns1__transferResponse:
		soap_serialize_ns1__transferResponse(soap, (const struct ns1__transferResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__isPackExist:
		soap_serialize_ns1__isPackExist(soap, (const struct ns1__isPackExist *)ptr);
		break;
	case SOAP_TYPE_ns1__isPackExistResponse:
		soap_serialize_ns1__isPackExistResponse(soap, (const struct ns1__isPackExistResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__InterfaceParameter:
		soap_serialize_ns1__InterfaceParameter(soap, (const struct ns1__InterfaceParameter *)ptr);
		break;
	case SOAP_TYPE___ns21__addSendinfo:
		soap_serialize___ns21__addSendinfo(soap, (const struct __ns21__addSendinfo *)ptr);
		break;
	case SOAP_TYPE___ns21__addNode:
		soap_serialize___ns21__addNode(soap, (const struct __ns21__addNode *)ptr);
		break;
	case SOAP_TYPE___ns21__dispense:
		soap_serialize___ns21__dispense(soap, (const struct __ns21__dispense *)ptr);
		break;
	case SOAP_TYPE___ns21__getSendinfo:
		soap_serialize___ns21__getSendinfo(soap, (const struct __ns21__getSendinfo *)ptr);
		break;
	case SOAP_TYPE___ns21__TransferResultSecond:
		soap_serialize___ns21__TransferResultSecond(soap, (const struct __ns21__TransferResultSecond *)ptr);
		break;
	case SOAP_TYPE___ns21__transferResult:
		soap_serialize___ns21__transferResult(soap, (const struct __ns21__transferResult *)ptr);
		break;
	case SOAP_TYPE_PointerTons21__addSendinfoResponse:
		soap_serialize_PointerTons21__addSendinfoResponse(soap, (ns21__addSendinfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__addSendinfo:
		soap_serialize_PointerTons21__addSendinfo(soap, (ns21__addSendinfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__addNodeResponse:
		soap_serialize_PointerTons21__addNodeResponse(soap, (ns21__addNodeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__addNode:
		soap_serialize_PointerTons21__addNode(soap, (ns21__addNode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__dispenseResponse:
		soap_serialize_PointerTons21__dispenseResponse(soap, (ns21__dispenseResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__dispense:
		soap_serialize_PointerTons21__dispense(soap, (ns21__dispense *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__getSendinfoResponse:
		soap_serialize_PointerTons21__getSendinfoResponse(soap, (ns21__getSendinfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__getSendinfo:
		soap_serialize_PointerTons21__getSendinfo(soap, (ns21__getSendinfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__TransferResultSecondResponse:
		soap_serialize_PointerTons21__TransferResultSecondResponse(soap, (ns21__TransferResultSecondResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__TransferResultSecond:
		soap_serialize_PointerTons21__TransferResultSecond(soap, (ns21__TransferResultSecond *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__transferResultResponse:
		soap_serialize_PointerTons21__transferResultResponse(soap, (ns21__transferResultResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__transferResult:
		soap_serialize_PointerTons21__transferResult(soap, (ns21__transferResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__WNode:
		soap_serialize_PointerTons21__WNode(soap, (ns21__WNode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__PackInfo:
		soap_serialize_PointerTons21__PackInfo(soap, (ns21__PackInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons21__SendinfoTask:
		soap_serialize_PointerTons21__SendinfoTask(soap, (ns21__SendinfoTask *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__SendinfoTask:
		return (void*)soap_instantiate_ns21__SendinfoTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__PackInfo:
		return (void*)soap_instantiate_ns21__PackInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__WNode:
		return (void*)soap_instantiate_ns21__WNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__transferResult:
		return (void*)soap_instantiate_ns21__transferResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__transferResultResponse:
		return (void*)soap_instantiate_ns21__transferResultResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__TransferResultSecond:
		return (void*)soap_instantiate_ns21__TransferResultSecond(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__TransferResultSecondResponse:
		return (void*)soap_instantiate_ns21__TransferResultSecondResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__getSendinfo:
		return (void*)soap_instantiate_ns21__getSendinfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__getSendinfoResponse:
		return (void*)soap_instantiate_ns21__getSendinfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__dispense:
		return (void*)soap_instantiate_ns21__dispense(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__dispenseResponse:
		return (void*)soap_instantiate_ns21__dispenseResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__addNode:
		return (void*)soap_instantiate_ns21__addNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__addNodeResponse:
		return (void*)soap_instantiate_ns21__addNodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__addSendinfo:
		return (void*)soap_instantiate_ns21__addSendinfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns21__addSendinfoResponse:
		return (void*)soap_instantiate_ns21__addSendinfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns21__transferResult:
		return (void*)soap_instantiate___ns21__transferResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns21__TransferResultSecond:
		return (void*)soap_instantiate___ns21__TransferResultSecond(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns21__getSendinfo:
		return (void*)soap_instantiate___ns21__getSendinfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns21__dispense:
		return (void*)soap_instantiate___ns21__dispense(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns21__addNode:
		return (void*)soap_instantiate___ns21__addNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns21__addSendinfo:
		return (void*)soap_instantiate___ns21__addSendinfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__InterfaceParameter:
		return (void*)soap_instantiate_ns1__InterfaceParameter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__isPackExistResponse:
		return (void*)soap_instantiate_ns1__isPackExistResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__isPackExist:
		return (void*)soap_instantiate_ns1__isPackExist(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__transferResponse:
		return (void*)soap_instantiate_ns1__transferResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__transfer:
		return (void*)soap_instantiate_ns1__transfer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__cutPackageResponse:
		return (void*)soap_instantiate_ns1__cutPackageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__cutPackage:
		return (void*)soap_instantiate_ns1__cutPackage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getUsableSpaceResponse:
		return (void*)soap_instantiate_ns1__getUsableSpaceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getUsableSpace:
		return (void*)soap_instantiate_ns1__getUsableSpace(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deletePackageResponse:
		return (void*)soap_instantiate_ns1__deletePackageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deletePackage:
		return (void*)soap_instantiate_ns1__deletePackage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getTempPackageResponse:
		return (void*)soap_instantiate_ns1__getTempPackageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getTempPackage:
		return (void*)soap_instantiate_ns1__getTempPackage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__maketoResponse:
		return (void*)soap_instantiate_ns1__maketoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__maketo:
		return (void*)soap_instantiate_ns1__maketo(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons21__SendinfoTask:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons21__SendinfoTask(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns21__SendinfoTask:
		if (p->size < 0)
			SOAP_DELETE((ns21__SendinfoTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__SendinfoTask*)p->ptr);
		break;
	case SOAP_TYPE_ns21__PackInfo:
		if (p->size < 0)
			SOAP_DELETE((ns21__PackInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__PackInfo*)p->ptr);
		break;
	case SOAP_TYPE_ns21__WNode:
		if (p->size < 0)
			SOAP_DELETE((ns21__WNode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__WNode*)p->ptr);
		break;
	case SOAP_TYPE_ns21__transferResult:
		if (p->size < 0)
			SOAP_DELETE((ns21__transferResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__transferResult*)p->ptr);
		break;
	case SOAP_TYPE_ns21__transferResultResponse:
		if (p->size < 0)
			SOAP_DELETE((ns21__transferResultResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__transferResultResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns21__TransferResultSecond:
		if (p->size < 0)
			SOAP_DELETE((ns21__TransferResultSecond*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__TransferResultSecond*)p->ptr);
		break;
	case SOAP_TYPE_ns21__TransferResultSecondResponse:
		if (p->size < 0)
			SOAP_DELETE((ns21__TransferResultSecondResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__TransferResultSecondResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns21__getSendinfo:
		if (p->size < 0)
			SOAP_DELETE((ns21__getSendinfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__getSendinfo*)p->ptr);
		break;
	case SOAP_TYPE_ns21__getSendinfoResponse:
		if (p->size < 0)
			SOAP_DELETE((ns21__getSendinfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__getSendinfoResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns21__dispense:
		if (p->size < 0)
			SOAP_DELETE((ns21__dispense*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__dispense*)p->ptr);
		break;
	case SOAP_TYPE_ns21__dispenseResponse:
		if (p->size < 0)
			SOAP_DELETE((ns21__dispenseResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__dispenseResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns21__addNode:
		if (p->size < 0)
			SOAP_DELETE((ns21__addNode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__addNode*)p->ptr);
		break;
	case SOAP_TYPE_ns21__addNodeResponse:
		if (p->size < 0)
			SOAP_DELETE((ns21__addNodeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__addNodeResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns21__addSendinfo:
		if (p->size < 0)
			SOAP_DELETE((ns21__addSendinfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__addSendinfo*)p->ptr);
		break;
	case SOAP_TYPE_ns21__addSendinfoResponse:
		if (p->size < 0)
			SOAP_DELETE((ns21__addSendinfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns21__addSendinfoResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns21__transferResult:
		if (p->size < 0)
			SOAP_DELETE((struct __ns21__transferResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns21__transferResult*)p->ptr);
		break;
	case SOAP_TYPE___ns21__TransferResultSecond:
		if (p->size < 0)
			SOAP_DELETE((struct __ns21__TransferResultSecond*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns21__TransferResultSecond*)p->ptr);
		break;
	case SOAP_TYPE___ns21__getSendinfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns21__getSendinfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns21__getSendinfo*)p->ptr);
		break;
	case SOAP_TYPE___ns21__dispense:
		if (p->size < 0)
			SOAP_DELETE((struct __ns21__dispense*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns21__dispense*)p->ptr);
		break;
	case SOAP_TYPE___ns21__addNode:
		if (p->size < 0)
			SOAP_DELETE((struct __ns21__addNode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns21__addNode*)p->ptr);
		break;
	case SOAP_TYPE___ns21__addSendinfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns21__addSendinfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns21__addSendinfo*)p->ptr);
		break;
	case SOAP_TYPE_ns1__InterfaceParameter:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__InterfaceParameter*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__InterfaceParameter*)p->ptr);
		break;
	case SOAP_TYPE_ns1__isPackExistResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__isPackExistResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__isPackExistResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__isPackExist:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__isPackExist*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__isPackExist*)p->ptr);
		break;
	case SOAP_TYPE_ns1__transferResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__transferResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__transferResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__transfer:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__transfer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__transfer*)p->ptr);
		break;
	case SOAP_TYPE_ns1__cutPackageResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__cutPackageResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__cutPackageResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__cutPackage:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__cutPackage*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__cutPackage*)p->ptr);
		break;
	case SOAP_TYPE_ns1__getUsableSpaceResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__getUsableSpaceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__getUsableSpaceResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__getUsableSpace:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__getUsableSpace*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__getUsableSpace*)p->ptr);
		break;
	case SOAP_TYPE_ns1__deletePackageResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__deletePackageResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__deletePackageResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__deletePackage:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__deletePackage*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__deletePackage*)p->ptr);
		break;
	case SOAP_TYPE_ns1__getTempPackageResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__getTempPackageResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__getTempPackageResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__getTempPackage:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__getTempPackage*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__getTempPackage*)p->ptr);
		break;
	case SOAP_TYPE_ns1__maketoResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__maketoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__maketoResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__maketo:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__maketo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__maketo*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE((std::vector<std::string >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<std::string >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons21__SendinfoTask:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns21__SendinfoTask * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns21__SendinfoTask * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons21__SendinfoTask:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns21__SendinfoTask * >*)p)[len] = *(ns21__SendinfoTask **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns21__addSendinfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns21__addSendinfoResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns21__addSendinfoResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns21__addSendinfoResponse::return_);
	/* transient soap skipped */
#endif
}

int ns21__addSendinfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__addSendinfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__addSendinfoResponse(struct soap *soap, const char *tag, int id, const ns21__addSendinfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__addSendinfoResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "return", -1, &(a->ns21__addSendinfoResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__addSendinfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__addSendinfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns21__addSendinfoResponse * SOAP_FMAC4 soap_in_ns21__addSendinfoResponse(struct soap *soap, const char *tag, ns21__addSendinfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__addSendinfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__addSendinfoResponse, sizeof(ns21__addSendinfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__addSendinfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__addSendinfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "return", &(a->ns21__addSendinfoResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__addSendinfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__addSendinfoResponse, 0, sizeof(ns21__addSendinfoResponse), 0, soap_copy_ns21__addSendinfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns21__addSendinfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__addSendinfoResponse);
	if (this->soap_out(soap, tag?tag:"ns21:addSendinfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__addSendinfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__addSendinfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns21__addSendinfoResponse * SOAP_FMAC4 soap_get_ns21__addSendinfoResponse(struct soap *soap, ns21__addSendinfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__addSendinfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__addSendinfoResponse * SOAP_FMAC2 soap_instantiate_ns21__addSendinfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__addSendinfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__addSendinfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__addSendinfoResponse);
		if (size)
			*size = sizeof(ns21__addSendinfoResponse);
		((ns21__addSendinfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__addSendinfoResponse, n);
		if (size)
			*size = n * sizeof(ns21__addSendinfoResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__addSendinfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__addSendinfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__addSendinfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__addSendinfoResponse %p -> %p\n", q, p));
	*(ns21__addSendinfoResponse*)p = *(ns21__addSendinfoResponse*)q;
}

void ns21__addSendinfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns21__addSendinfo::arg0 = NULL;
	/* transient soap skipped */
}

void ns21__addSendinfo::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns21__addSendinfo::arg0);
	/* transient soap skipped */
#endif
}

int ns21__addSendinfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__addSendinfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__addSendinfo(struct soap *soap, const char *tag, int id, const ns21__addSendinfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__addSendinfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &(a->ns21__addSendinfo::arg0), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__addSendinfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__addSendinfo(soap, tag, this, type);
}

SOAP_FMAC3 ns21__addSendinfo * SOAP_FMAC4 soap_in_ns21__addSendinfo(struct soap *soap, const char *tag, ns21__addSendinfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__addSendinfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__addSendinfo, sizeof(ns21__addSendinfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__addSendinfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__addSendinfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg0", &(a->ns21__addSendinfo::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__addSendinfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__addSendinfo, 0, sizeof(ns21__addSendinfo), 0, soap_copy_ns21__addSendinfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns21__addSendinfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__addSendinfo);
	if (this->soap_out(soap, tag?tag:"ns21:addSendinfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__addSendinfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__addSendinfo(soap, this, tag, type);
}

SOAP_FMAC3 ns21__addSendinfo * SOAP_FMAC4 soap_get_ns21__addSendinfo(struct soap *soap, ns21__addSendinfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__addSendinfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__addSendinfo * SOAP_FMAC2 soap_instantiate_ns21__addSendinfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__addSendinfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__addSendinfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__addSendinfo);
		if (size)
			*size = sizeof(ns21__addSendinfo);
		((ns21__addSendinfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__addSendinfo, n);
		if (size)
			*size = n * sizeof(ns21__addSendinfo);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__addSendinfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__addSendinfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__addSendinfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__addSendinfo %p -> %p\n", q, p));
	*(ns21__addSendinfo*)p = *(ns21__addSendinfo*)q;
}

void ns21__addNodeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns21__addNodeResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns21__addNodeResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->ns21__addNodeResponse::return_);
	/* transient soap skipped */
#endif
}

int ns21__addNodeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__addNodeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__addNodeResponse(struct soap *soap, const char *tag, int id, const ns21__addNodeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__addNodeResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "return", -1, &(a->ns21__addNodeResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__addNodeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__addNodeResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns21__addNodeResponse * SOAP_FMAC4 soap_in_ns21__addNodeResponse(struct soap *soap, const char *tag, ns21__addNodeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__addNodeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__addNodeResponse, sizeof(ns21__addNodeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__addNodeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__addNodeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "return", &(a->ns21__addNodeResponse::return_), "xsd:int"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__addNodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__addNodeResponse, 0, sizeof(ns21__addNodeResponse), 0, soap_copy_ns21__addNodeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns21__addNodeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__addNodeResponse);
	if (this->soap_out(soap, tag?tag:"ns21:addNodeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__addNodeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__addNodeResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns21__addNodeResponse * SOAP_FMAC4 soap_get_ns21__addNodeResponse(struct soap *soap, ns21__addNodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__addNodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__addNodeResponse * SOAP_FMAC2 soap_instantiate_ns21__addNodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__addNodeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__addNodeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__addNodeResponse);
		if (size)
			*size = sizeof(ns21__addNodeResponse);
		((ns21__addNodeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__addNodeResponse, n);
		if (size)
			*size = n * sizeof(ns21__addNodeResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__addNodeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__addNodeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__addNodeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__addNodeResponse %p -> %p\n", q, p));
	*(ns21__addNodeResponse*)p = *(ns21__addNodeResponse*)q;
}

void ns21__addNode::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns21__addNode::arg0 = NULL;
	/* transient soap skipped */
}

void ns21__addNode::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons21__WNode(soap, &this->ns21__addNode::arg0);
	/* transient soap skipped */
#endif
}

int ns21__addNode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__addNode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__addNode(struct soap *soap, const char *tag, int id, const ns21__addNode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__addNode), type))
		return soap->error;
	if (soap_out_PointerTons21__WNode(soap, "arg0", -1, &(a->ns21__addNode::arg0), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__addNode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__addNode(soap, tag, this, type);
}

SOAP_FMAC3 ns21__addNode * SOAP_FMAC4 soap_in_ns21__addNode(struct soap *soap, const char *tag, ns21__addNode *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__addNode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__addNode, sizeof(ns21__addNode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__addNode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__addNode *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons21__WNode(soap, "arg0", &(a->ns21__addNode::arg0), "ns21:WNode"))
				{	soap_flag_arg01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__addNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__addNode, 0, sizeof(ns21__addNode), 0, soap_copy_ns21__addNode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns21__addNode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__addNode);
	if (this->soap_out(soap, tag?tag:"ns21:addNode", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__addNode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__addNode(soap, this, tag, type);
}

SOAP_FMAC3 ns21__addNode * SOAP_FMAC4 soap_get_ns21__addNode(struct soap *soap, ns21__addNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__addNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__addNode * SOAP_FMAC2 soap_instantiate_ns21__addNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__addNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__addNode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__addNode);
		if (size)
			*size = sizeof(ns21__addNode);
		((ns21__addNode*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__addNode, n);
		if (size)
			*size = n * sizeof(ns21__addNode);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__addNode*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__addNode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__addNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__addNode %p -> %p\n", q, p));
	*(ns21__addNode*)p = *(ns21__addNode*)q;
}

void ns21__dispenseResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->ns21__dispenseResponse::return_);
	/* transient soap skipped */
}

void ns21__dispenseResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int ns21__dispenseResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__dispenseResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__dispenseResponse(struct soap *soap, const char *tag, int id, const ns21__dispenseResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__dispenseResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &(a->ns21__dispenseResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__dispenseResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__dispenseResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns21__dispenseResponse * SOAP_FMAC4 soap_in_ns21__dispenseResponse(struct soap *soap, const char *tag, ns21__dispenseResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__dispenseResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__dispenseResponse, sizeof(ns21__dispenseResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__dispenseResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__dispenseResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "return", &(a->ns21__dispenseResponse::return_), "xsd:boolean"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__dispenseResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__dispenseResponse, 0, sizeof(ns21__dispenseResponse), 0, soap_copy_ns21__dispenseResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns21__dispenseResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__dispenseResponse);
	if (this->soap_out(soap, tag?tag:"ns21:dispenseResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__dispenseResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__dispenseResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns21__dispenseResponse * SOAP_FMAC4 soap_get_ns21__dispenseResponse(struct soap *soap, ns21__dispenseResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__dispenseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__dispenseResponse * SOAP_FMAC2 soap_instantiate_ns21__dispenseResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__dispenseResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__dispenseResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__dispenseResponse);
		if (size)
			*size = sizeof(ns21__dispenseResponse);
		((ns21__dispenseResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__dispenseResponse, n);
		if (size)
			*size = n * sizeof(ns21__dispenseResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__dispenseResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__dispenseResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__dispenseResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__dispenseResponse %p -> %p\n", q, p));
	*(ns21__dispenseResponse*)p = *(ns21__dispenseResponse*)q;
}

void ns21__dispense::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns21__dispense::arg0 = NULL;
	/* transient soap skipped */
}

void ns21__dispense::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons21__PackInfo(soap, &this->ns21__dispense::arg0);
	/* transient soap skipped */
#endif
}

int ns21__dispense::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__dispense(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__dispense(struct soap *soap, const char *tag, int id, const ns21__dispense *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__dispense), type))
		return soap->error;
	if (soap_out_PointerTons21__PackInfo(soap, "arg0", -1, &(a->ns21__dispense::arg0), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__dispense::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__dispense(soap, tag, this, type);
}

SOAP_FMAC3 ns21__dispense * SOAP_FMAC4 soap_in_ns21__dispense(struct soap *soap, const char *tag, ns21__dispense *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__dispense *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__dispense, sizeof(ns21__dispense), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__dispense)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__dispense *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons21__PackInfo(soap, "arg0", &(a->ns21__dispense::arg0), "ns21:PackInfo"))
				{	soap_flag_arg01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__dispense *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__dispense, 0, sizeof(ns21__dispense), 0, soap_copy_ns21__dispense);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns21__dispense::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__dispense);
	if (this->soap_out(soap, tag?tag:"ns21:dispense", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__dispense::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__dispense(soap, this, tag, type);
}

SOAP_FMAC3 ns21__dispense * SOAP_FMAC4 soap_get_ns21__dispense(struct soap *soap, ns21__dispense *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__dispense(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__dispense * SOAP_FMAC2 soap_instantiate_ns21__dispense(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__dispense(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__dispense, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__dispense);
		if (size)
			*size = sizeof(ns21__dispense);
		((ns21__dispense*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__dispense, n);
		if (size)
			*size = n * sizeof(ns21__dispense);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__dispense*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__dispense*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__dispense(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__dispense %p -> %p\n", q, p));
	*(ns21__dispense*)p = *(ns21__dispense*)q;
}

void ns21__getSendinfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons21__SendinfoTask(soap, &this->ns21__getSendinfoResponse::return_);
	/* transient soap skipped */
}

void ns21__getSendinfoResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons21__SendinfoTask(soap, &this->ns21__getSendinfoResponse::return_);
	/* transient soap skipped */
#endif
}

int ns21__getSendinfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__getSendinfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__getSendinfoResponse(struct soap *soap, const char *tag, int id, const ns21__getSendinfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__getSendinfoResponse), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons21__SendinfoTask(soap, "return", -1, &(a->ns21__getSendinfoResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__getSendinfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__getSendinfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns21__getSendinfoResponse * SOAP_FMAC4 soap_in_ns21__getSendinfoResponse(struct soap *soap, const char *tag, ns21__getSendinfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__getSendinfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__getSendinfoResponse, sizeof(ns21__getSendinfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__getSendinfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__getSendinfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons21__SendinfoTask(soap, "return", &(a->ns21__getSendinfoResponse::return_), "ns21:SendinfoTask"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__getSendinfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__getSendinfoResponse, 0, sizeof(ns21__getSendinfoResponse), 0, soap_copy_ns21__getSendinfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns21__getSendinfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__getSendinfoResponse);
	if (this->soap_out(soap, tag?tag:"ns21:getSendinfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__getSendinfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__getSendinfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns21__getSendinfoResponse * SOAP_FMAC4 soap_get_ns21__getSendinfoResponse(struct soap *soap, ns21__getSendinfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__getSendinfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__getSendinfoResponse * SOAP_FMAC2 soap_instantiate_ns21__getSendinfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__getSendinfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__getSendinfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__getSendinfoResponse);
		if (size)
			*size = sizeof(ns21__getSendinfoResponse);
		((ns21__getSendinfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__getSendinfoResponse, n);
		if (size)
			*size = n * sizeof(ns21__getSendinfoResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__getSendinfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__getSendinfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__getSendinfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__getSendinfoResponse %p -> %p\n", q, p));
	*(ns21__getSendinfoResponse*)p = *(ns21__getSendinfoResponse*)q;
}

void ns21__getSendinfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns21__getSendinfo::arg0 = NULL;
	/* transient soap skipped */
}

void ns21__getSendinfo::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns21__getSendinfo::arg0);
	/* transient soap skipped */
#endif
}

int ns21__getSendinfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__getSendinfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__getSendinfo(struct soap *soap, const char *tag, int id, const ns21__getSendinfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__getSendinfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &(a->ns21__getSendinfo::arg0), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__getSendinfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__getSendinfo(soap, tag, this, type);
}

SOAP_FMAC3 ns21__getSendinfo * SOAP_FMAC4 soap_in_ns21__getSendinfo(struct soap *soap, const char *tag, ns21__getSendinfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__getSendinfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__getSendinfo, sizeof(ns21__getSendinfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__getSendinfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__getSendinfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg0", &(a->ns21__getSendinfo::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__getSendinfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__getSendinfo, 0, sizeof(ns21__getSendinfo), 0, soap_copy_ns21__getSendinfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns21__getSendinfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__getSendinfo);
	if (this->soap_out(soap, tag?tag:"ns21:getSendinfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__getSendinfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__getSendinfo(soap, this, tag, type);
}

SOAP_FMAC3 ns21__getSendinfo * SOAP_FMAC4 soap_get_ns21__getSendinfo(struct soap *soap, ns21__getSendinfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__getSendinfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__getSendinfo * SOAP_FMAC2 soap_instantiate_ns21__getSendinfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__getSendinfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__getSendinfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__getSendinfo);
		if (size)
			*size = sizeof(ns21__getSendinfo);
		((ns21__getSendinfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__getSendinfo, n);
		if (size)
			*size = n * sizeof(ns21__getSendinfo);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__getSendinfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__getSendinfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__getSendinfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__getSendinfo %p -> %p\n", q, p));
	*(ns21__getSendinfo*)p = *(ns21__getSendinfo*)q;
}

void ns21__TransferResultSecondResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns21__TransferResultSecondResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int ns21__TransferResultSecondResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__TransferResultSecondResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__TransferResultSecondResponse(struct soap *soap, const char *tag, int id, const ns21__TransferResultSecondResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__TransferResultSecondResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__TransferResultSecondResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__TransferResultSecondResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns21__TransferResultSecondResponse * SOAP_FMAC4 soap_in_ns21__TransferResultSecondResponse(struct soap *soap, const char *tag, ns21__TransferResultSecondResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__TransferResultSecondResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__TransferResultSecondResponse, sizeof(ns21__TransferResultSecondResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__TransferResultSecondResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__TransferResultSecondResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__TransferResultSecondResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__TransferResultSecondResponse, 0, sizeof(ns21__TransferResultSecondResponse), 0, soap_copy_ns21__TransferResultSecondResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns21__TransferResultSecondResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__TransferResultSecondResponse);
	if (this->soap_out(soap, tag?tag:"ns21:TransferResultSecondResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__TransferResultSecondResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__TransferResultSecondResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns21__TransferResultSecondResponse * SOAP_FMAC4 soap_get_ns21__TransferResultSecondResponse(struct soap *soap, ns21__TransferResultSecondResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__TransferResultSecondResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__TransferResultSecondResponse * SOAP_FMAC2 soap_instantiate_ns21__TransferResultSecondResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__TransferResultSecondResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__TransferResultSecondResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__TransferResultSecondResponse);
		if (size)
			*size = sizeof(ns21__TransferResultSecondResponse);
		((ns21__TransferResultSecondResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__TransferResultSecondResponse, n);
		if (size)
			*size = n * sizeof(ns21__TransferResultSecondResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__TransferResultSecondResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__TransferResultSecondResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__TransferResultSecondResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__TransferResultSecondResponse %p -> %p\n", q, p));
	*(ns21__TransferResultSecondResponse*)p = *(ns21__TransferResultSecondResponse*)q;
}

void ns21__TransferResultSecond::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns21__TransferResultSecond::arg0 = NULL;
	soap_default_bool(soap, &this->ns21__TransferResultSecond::arg1);
	/* transient soap skipped */
}

void ns21__TransferResultSecond::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns21__TransferResultSecond::arg0);
	/* transient soap skipped */
#endif
}

int ns21__TransferResultSecond::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__TransferResultSecond(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__TransferResultSecond(struct soap *soap, const char *tag, int id, const ns21__TransferResultSecond *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__TransferResultSecond), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &(a->ns21__TransferResultSecond::arg0), ""))
		return soap->error;
	if (soap_out_bool(soap, "arg1", -1, &(a->ns21__TransferResultSecond::arg1), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__TransferResultSecond::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__TransferResultSecond(soap, tag, this, type);
}

SOAP_FMAC3 ns21__TransferResultSecond * SOAP_FMAC4 soap_in_ns21__TransferResultSecond(struct soap *soap, const char *tag, ns21__TransferResultSecond *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__TransferResultSecond *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__TransferResultSecond, sizeof(ns21__TransferResultSecond), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__TransferResultSecond)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__TransferResultSecond *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg0", &(a->ns21__TransferResultSecond::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "arg1", &(a->ns21__TransferResultSecond::arg1), "xsd:boolean"))
				{	soap_flag_arg11--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__TransferResultSecond *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__TransferResultSecond, 0, sizeof(ns21__TransferResultSecond), 0, soap_copy_ns21__TransferResultSecond);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg11 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns21__TransferResultSecond::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__TransferResultSecond);
	if (this->soap_out(soap, tag?tag:"ns21:TransferResultSecond", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__TransferResultSecond::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__TransferResultSecond(soap, this, tag, type);
}

SOAP_FMAC3 ns21__TransferResultSecond * SOAP_FMAC4 soap_get_ns21__TransferResultSecond(struct soap *soap, ns21__TransferResultSecond *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__TransferResultSecond(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__TransferResultSecond * SOAP_FMAC2 soap_instantiate_ns21__TransferResultSecond(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__TransferResultSecond(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__TransferResultSecond, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__TransferResultSecond);
		if (size)
			*size = sizeof(ns21__TransferResultSecond);
		((ns21__TransferResultSecond*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__TransferResultSecond, n);
		if (size)
			*size = n * sizeof(ns21__TransferResultSecond);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__TransferResultSecond*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__TransferResultSecond*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__TransferResultSecond(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__TransferResultSecond %p -> %p\n", q, p));
	*(ns21__TransferResultSecond*)p = *(ns21__TransferResultSecond*)q;
}

void ns21__transferResultResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns21__transferResultResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int ns21__transferResultResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__transferResultResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__transferResultResponse(struct soap *soap, const char *tag, int id, const ns21__transferResultResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__transferResultResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__transferResultResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__transferResultResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns21__transferResultResponse * SOAP_FMAC4 soap_in_ns21__transferResultResponse(struct soap *soap, const char *tag, ns21__transferResultResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__transferResultResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__transferResultResponse, sizeof(ns21__transferResultResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__transferResultResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__transferResultResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__transferResultResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__transferResultResponse, 0, sizeof(ns21__transferResultResponse), 0, soap_copy_ns21__transferResultResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns21__transferResultResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__transferResultResponse);
	if (this->soap_out(soap, tag?tag:"ns21:transferResultResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__transferResultResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__transferResultResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns21__transferResultResponse * SOAP_FMAC4 soap_get_ns21__transferResultResponse(struct soap *soap, ns21__transferResultResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__transferResultResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__transferResultResponse * SOAP_FMAC2 soap_instantiate_ns21__transferResultResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__transferResultResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__transferResultResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__transferResultResponse);
		if (size)
			*size = sizeof(ns21__transferResultResponse);
		((ns21__transferResultResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__transferResultResponse, n);
		if (size)
			*size = n * sizeof(ns21__transferResultResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__transferResultResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__transferResultResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__transferResultResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__transferResultResponse %p -> %p\n", q, p));
	*(ns21__transferResultResponse*)p = *(ns21__transferResultResponse*)q;
}

void ns21__transferResult::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns21__transferResult::arg0 = NULL;
	soap_default_bool(soap, &this->ns21__transferResult::arg1);
	/* transient soap skipped */
}

void ns21__transferResult::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns21__transferResult::arg0);
	/* transient soap skipped */
#endif
}

int ns21__transferResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__transferResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__transferResult(struct soap *soap, const char *tag, int id, const ns21__transferResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__transferResult), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &(a->ns21__transferResult::arg0), ""))
		return soap->error;
	if (soap_out_bool(soap, "arg1", -1, &(a->ns21__transferResult::arg1), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__transferResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__transferResult(soap, tag, this, type);
}

SOAP_FMAC3 ns21__transferResult * SOAP_FMAC4 soap_in_ns21__transferResult(struct soap *soap, const char *tag, ns21__transferResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__transferResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__transferResult, sizeof(ns21__transferResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__transferResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__transferResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "arg0", &(a->ns21__transferResult::arg0), "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "arg1", &(a->ns21__transferResult::arg1), "xsd:boolean"))
				{	soap_flag_arg11--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__transferResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__transferResult, 0, sizeof(ns21__transferResult), 0, soap_copy_ns21__transferResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg11 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns21__transferResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__transferResult);
	if (this->soap_out(soap, tag?tag:"ns21:transferResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__transferResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__transferResult(soap, this, tag, type);
}

SOAP_FMAC3 ns21__transferResult * SOAP_FMAC4 soap_get_ns21__transferResult(struct soap *soap, ns21__transferResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__transferResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__transferResult * SOAP_FMAC2 soap_instantiate_ns21__transferResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__transferResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__transferResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__transferResult);
		if (size)
			*size = sizeof(ns21__transferResult);
		((ns21__transferResult*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__transferResult, n);
		if (size)
			*size = n * sizeof(ns21__transferResult);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__transferResult*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__transferResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__transferResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__transferResult %p -> %p\n", q, p));
	*(ns21__transferResult*)p = *(ns21__transferResult*)q;
}

void ns21__WNode::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns21__WNode::nodeName);
	soap_default_std__string(soap, &this->ns21__WNode::nodeCode);
	soap_default_std__string(soap, &this->ns21__WNode::city);
	soap_default_int(soap, &this->ns21__WNode::cinemaType);
	this->ns21__WNode::userName = NULL;
	this->ns21__WNode::tel = NULL;
	soap_default_std__string(soap, &this->ns21__WNode::transferMode);
	/* transient soap skipped */
}

void ns21__WNode::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns21__WNode::nodeName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns21__WNode::nodeName);
	soap_embedded(soap, &this->ns21__WNode::nodeCode, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns21__WNode::nodeCode);
	soap_embedded(soap, &this->ns21__WNode::city, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns21__WNode::city);
	soap_embedded(soap, &this->ns21__WNode::cinemaType, SOAP_TYPE_int);
	soap_serialize_PointerTostd__string(soap, &this->ns21__WNode::userName);
	soap_serialize_PointerTostd__string(soap, &this->ns21__WNode::tel);
	soap_embedded(soap, &this->ns21__WNode::transferMode, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns21__WNode::transferMode);
	/* transient soap skipped */
#endif
}

int ns21__WNode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__WNode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__WNode(struct soap *soap, const char *tag, int id, const ns21__WNode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__WNode), type))
		return soap->error;
	if (soap_out_std__string(soap, "nodeName", -1, &(a->ns21__WNode::nodeName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "nodeCode", -1, &(a->ns21__WNode::nodeCode), ""))
		return soap->error;
	if (soap_out_std__string(soap, "city", -1, &(a->ns21__WNode::city), ""))
		return soap->error;
	if (soap_out_int(soap, "cinemaType", -1, &(a->ns21__WNode::cinemaType), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "userName", -1, &(a->ns21__WNode::userName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tel", -1, &(a->ns21__WNode::tel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "transferMode", -1, &(a->ns21__WNode::transferMode), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__WNode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__WNode(soap, tag, this, type);
}

SOAP_FMAC3 ns21__WNode * SOAP_FMAC4 soap_in_ns21__WNode(struct soap *soap, const char *tag, ns21__WNode *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__WNode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__WNode, sizeof(ns21__WNode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__WNode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__WNode *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nodeName1 = 1;
	size_t soap_flag_nodeCode1 = 1;
	size_t soap_flag_city1 = 1;
	size_t soap_flag_cinemaType1 = 1;
	size_t soap_flag_userName1 = 1;
	size_t soap_flag_tel1 = 1;
	size_t soap_flag_transferMode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nodeName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "nodeName", &(a->ns21__WNode::nodeName), "xsd:string"))
				{	soap_flag_nodeName1--;
					continue;
				}
			if (soap_flag_nodeCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "nodeCode", &(a->ns21__WNode::nodeCode), "xsd:string"))
				{	soap_flag_nodeCode1--;
					continue;
				}
			if (soap_flag_city1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "city", &(a->ns21__WNode::city), "xsd:string"))
				{	soap_flag_city1--;
					continue;
				}
			if (soap_flag_cinemaType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cinemaType", &(a->ns21__WNode::cinemaType), "xsd:int"))
				{	soap_flag_cinemaType1--;
					continue;
				}
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "userName", &(a->ns21__WNode::userName), "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			if (soap_flag_tel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tel", &(a->ns21__WNode::tel), "xsd:string"))
				{	soap_flag_tel1--;
					continue;
				}
			if (soap_flag_transferMode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "transferMode", &(a->ns21__WNode::transferMode), "xsd:string"))
				{	soap_flag_transferMode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__WNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__WNode, 0, sizeof(ns21__WNode), 0, soap_copy_ns21__WNode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nodeName1 > 0 || soap_flag_nodeCode1 > 0 || soap_flag_city1 > 0 || soap_flag_cinemaType1 > 0 || soap_flag_transferMode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns21__WNode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__WNode);
	if (this->soap_out(soap, tag?tag:"ns21:WNode", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__WNode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__WNode(soap, this, tag, type);
}

SOAP_FMAC3 ns21__WNode * SOAP_FMAC4 soap_get_ns21__WNode(struct soap *soap, ns21__WNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__WNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__WNode * SOAP_FMAC2 soap_instantiate_ns21__WNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__WNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__WNode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__WNode);
		if (size)
			*size = sizeof(ns21__WNode);
		((ns21__WNode*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__WNode, n);
		if (size)
			*size = n * sizeof(ns21__WNode);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__WNode*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__WNode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__WNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__WNode %p -> %p\n", q, p));
	*(ns21__WNode*)p = *(ns21__WNode*)q;
}

void ns21__PackInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns21__PackInfo::uuid = NULL;
	this->ns21__PackInfo::packTitle = NULL;
	this->ns21__PackInfo::packName = NULL;
	this->ns21__PackInfo::packSize = NULL;
	this->ns21__PackInfo::ftpAdress = NULL;
	/* transient soap skipped */
}

void ns21__PackInfo::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns21__PackInfo::uuid);
	soap_serialize_PointerTostd__string(soap, &this->ns21__PackInfo::packTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns21__PackInfo::packName);
	soap_serialize_PointerTostd__string(soap, &this->ns21__PackInfo::packSize);
	soap_serialize_PointerTostd__string(soap, &this->ns21__PackInfo::ftpAdress);
	/* transient soap skipped */
#endif
}

int ns21__PackInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__PackInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__PackInfo(struct soap *soap, const char *tag, int id, const ns21__PackInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__PackInfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "uuid", -1, &(a->ns21__PackInfo::uuid), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "packTitle", -1, &(a->ns21__PackInfo::packTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "packName", -1, &(a->ns21__PackInfo::packName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "packSize", -1, &(a->ns21__PackInfo::packSize), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ftpAdress", -1, &(a->ns21__PackInfo::ftpAdress), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__PackInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__PackInfo(soap, tag, this, type);
}

SOAP_FMAC3 ns21__PackInfo * SOAP_FMAC4 soap_in_ns21__PackInfo(struct soap *soap, const char *tag, ns21__PackInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__PackInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__PackInfo, sizeof(ns21__PackInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__PackInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__PackInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_uuid1 = 1;
	size_t soap_flag_packTitle1 = 1;
	size_t soap_flag_packName1 = 1;
	size_t soap_flag_packSize1 = 1;
	size_t soap_flag_ftpAdress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uuid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "uuid", &(a->ns21__PackInfo::uuid), "xsd:string"))
				{	soap_flag_uuid1--;
					continue;
				}
			if (soap_flag_packTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "packTitle", &(a->ns21__PackInfo::packTitle), "xsd:string"))
				{	soap_flag_packTitle1--;
					continue;
				}
			if (soap_flag_packName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "packName", &(a->ns21__PackInfo::packName), "xsd:string"))
				{	soap_flag_packName1--;
					continue;
				}
			if (soap_flag_packSize1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "packSize", &(a->ns21__PackInfo::packSize), "xsd:string"))
				{	soap_flag_packSize1--;
					continue;
				}
			if (soap_flag_ftpAdress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ftpAdress", &(a->ns21__PackInfo::ftpAdress), "xsd:string"))
				{	soap_flag_ftpAdress1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__PackInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__PackInfo, 0, sizeof(ns21__PackInfo), 0, soap_copy_ns21__PackInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns21__PackInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__PackInfo);
	if (this->soap_out(soap, tag?tag:"ns21:PackInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__PackInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__PackInfo(soap, this, tag, type);
}

SOAP_FMAC3 ns21__PackInfo * SOAP_FMAC4 soap_get_ns21__PackInfo(struct soap *soap, ns21__PackInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__PackInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__PackInfo * SOAP_FMAC2 soap_instantiate_ns21__PackInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__PackInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__PackInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__PackInfo);
		if (size)
			*size = sizeof(ns21__PackInfo);
		((ns21__PackInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__PackInfo, n);
		if (size)
			*size = n * sizeof(ns21__PackInfo);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__PackInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__PackInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__PackInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__PackInfo %p -> %p\n", q, p));
	*(ns21__PackInfo*)p = *(ns21__PackInfo*)q;
}

void ns21__SendinfoTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns21__SendinfoTask::nodeCode);
	soap_default_std__string(soap, &this->ns21__SendinfoTask::nodeName);
	soap_default_std__string(soap, &this->ns21__SendinfoTask::dateLine);
	soap_default_std__string(soap, &this->ns21__SendinfoTask::finishTime);
	soap_default_std__string(soap, &this->ns21__SendinfoTask::taskState);
	soap_default_std__string(soap, &this->ns21__SendinfoTask::taskRate);
	/* transient soap skipped */
}

void ns21__SendinfoTask::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns21__SendinfoTask::nodeCode, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns21__SendinfoTask::nodeCode);
	soap_embedded(soap, &this->ns21__SendinfoTask::nodeName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns21__SendinfoTask::nodeName);
	soap_embedded(soap, &this->ns21__SendinfoTask::dateLine, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns21__SendinfoTask::dateLine);
	soap_embedded(soap, &this->ns21__SendinfoTask::finishTime, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns21__SendinfoTask::finishTime);
	soap_embedded(soap, &this->ns21__SendinfoTask::taskState, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns21__SendinfoTask::taskState);
	soap_embedded(soap, &this->ns21__SendinfoTask::taskRate, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns21__SendinfoTask::taskRate);
	/* transient soap skipped */
#endif
}

int ns21__SendinfoTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns21__SendinfoTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns21__SendinfoTask(struct soap *soap, const char *tag, int id, const ns21__SendinfoTask *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns21__SendinfoTask), type))
		return soap->error;
	if (soap_out_std__string(soap, "nodeCode", -1, &(a->ns21__SendinfoTask::nodeCode), ""))
		return soap->error;
	if (soap_out_std__string(soap, "nodeName", -1, &(a->ns21__SendinfoTask::nodeName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "dateLine", -1, &(a->ns21__SendinfoTask::dateLine), ""))
		return soap->error;
	if (soap_out_std__string(soap, "finishTime", -1, &(a->ns21__SendinfoTask::finishTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "taskState", -1, &(a->ns21__SendinfoTask::taskState), ""))
		return soap->error;
	if (soap_out_std__string(soap, "taskRate", -1, &(a->ns21__SendinfoTask::taskRate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns21__SendinfoTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns21__SendinfoTask(soap, tag, this, type);
}

SOAP_FMAC3 ns21__SendinfoTask * SOAP_FMAC4 soap_in_ns21__SendinfoTask(struct soap *soap, const char *tag, ns21__SendinfoTask *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns21__SendinfoTask *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns21__SendinfoTask, sizeof(ns21__SendinfoTask), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns21__SendinfoTask)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns21__SendinfoTask *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nodeCode1 = 1;
	size_t soap_flag_nodeName1 = 1;
	size_t soap_flag_dateLine1 = 1;
	size_t soap_flag_finishTime1 = 1;
	size_t soap_flag_taskState1 = 1;
	size_t soap_flag_taskRate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nodeCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "nodeCode", &(a->ns21__SendinfoTask::nodeCode), "xsd:string"))
				{	soap_flag_nodeCode1--;
					continue;
				}
			if (soap_flag_nodeName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "nodeName", &(a->ns21__SendinfoTask::nodeName), "xsd:string"))
				{	soap_flag_nodeName1--;
					continue;
				}
			if (soap_flag_dateLine1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "dateLine", &(a->ns21__SendinfoTask::dateLine), "xsd:string"))
				{	soap_flag_dateLine1--;
					continue;
				}
			if (soap_flag_finishTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "finishTime", &(a->ns21__SendinfoTask::finishTime), "xsd:string"))
				{	soap_flag_finishTime1--;
					continue;
				}
			if (soap_flag_taskState1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "taskState", &(a->ns21__SendinfoTask::taskState), "xsd:string"))
				{	soap_flag_taskState1--;
					continue;
				}
			if (soap_flag_taskRate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "taskRate", &(a->ns21__SendinfoTask::taskRate), "xsd:string"))
				{	soap_flag_taskRate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns21__SendinfoTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns21__SendinfoTask, 0, sizeof(ns21__SendinfoTask), 0, soap_copy_ns21__SendinfoTask);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nodeCode1 > 0 || soap_flag_nodeName1 > 0 || soap_flag_dateLine1 > 0 || soap_flag_finishTime1 > 0 || soap_flag_taskState1 > 0 || soap_flag_taskRate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns21__SendinfoTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns21__SendinfoTask);
	if (this->soap_out(soap, tag?tag:"ns21:SendinfoTask", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns21__SendinfoTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns21__SendinfoTask(soap, this, tag, type);
}

SOAP_FMAC3 ns21__SendinfoTask * SOAP_FMAC4 soap_get_ns21__SendinfoTask(struct soap *soap, ns21__SendinfoTask *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns21__SendinfoTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns21__SendinfoTask * SOAP_FMAC2 soap_instantiate_ns21__SendinfoTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns21__SendinfoTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns21__SendinfoTask, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns21__SendinfoTask);
		if (size)
			*size = sizeof(ns21__SendinfoTask);
		((ns21__SendinfoTask*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns21__SendinfoTask, n);
		if (size)
			*size = n * sizeof(ns21__SendinfoTask);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns21__SendinfoTask*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns21__SendinfoTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns21__SendinfoTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns21__SendinfoTask %p -> %p\n", q, p));
	*(ns21__SendinfoTask*)p = *(ns21__SendinfoTask*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__maketo(struct soap *soap, struct ns1__maketo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns1__InterfaceParameter(soap, &a->param);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__maketo(struct soap *soap, const struct ns1__maketo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns1__InterfaceParameter(soap, &a->param);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__maketo(struct soap *soap, const char *tag, int id, const struct ns1__maketo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__maketo), type))
		return soap->error;
	if (soap_out_ns1__InterfaceParameter(soap, "param", -1, &a->param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__maketo * SOAP_FMAC4 soap_in_ns1__maketo(struct soap *soap, const char *tag, struct ns1__maketo *a, const char *type)
{
	size_t soap_flag_param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__maketo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__maketo, sizeof(struct ns1__maketo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__maketo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__InterfaceParameter(soap, "param", &a->param, "ns1:InterfaceParameter"))
				{	soap_flag_param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__maketo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__maketo, 0, sizeof(struct ns1__maketo), 0, soap_copy_ns1__maketo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_param > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__maketo(struct soap *soap, const struct ns1__maketo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__maketo);
	if (soap_out_ns1__maketo(soap, tag?tag:"ns1:maketo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__maketo * SOAP_FMAC4 soap_get_ns1__maketo(struct soap *soap, struct ns1__maketo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__maketo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__maketo * SOAP_FMAC2 soap_instantiate_ns1__maketo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__maketo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__maketo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__maketo);
		if (size)
			*size = sizeof(struct ns1__maketo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__maketo, n);
		if (size)
			*size = n * sizeof(struct ns1__maketo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__maketo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__maketo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__maketo %p -> %p\n", q, p));
	*(struct ns1__maketo*)p = *(struct ns1__maketo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__maketoResponse(struct soap *soap, struct ns1__maketoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->ret);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__maketoResponse(struct soap *soap, const struct ns1__maketoResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__maketoResponse(struct soap *soap, const char *tag, int id, const struct ns1__maketoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__maketoResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__maketoResponse * SOAP_FMAC4 soap_in_ns1__maketoResponse(struct soap *soap, const char *tag, struct ns1__maketoResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__maketoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__maketoResponse, sizeof(struct ns1__maketoResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__maketoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ret", &a->ret, "xsd:boolean"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__maketoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__maketoResponse, 0, sizeof(struct ns1__maketoResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ret > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__maketoResponse(struct soap *soap, const struct ns1__maketoResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__maketoResponse);
	if (soap_out_ns1__maketoResponse(soap, tag?tag:"ns1:maketoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__maketoResponse * SOAP_FMAC4 soap_get_ns1__maketoResponse(struct soap *soap, struct ns1__maketoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__maketoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__maketoResponse * SOAP_FMAC2 soap_instantiate_ns1__maketoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__maketoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__maketoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__maketoResponse);
		if (size)
			*size = sizeof(struct ns1__maketoResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__maketoResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__maketoResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__maketoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__maketoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__maketoResponse %p -> %p\n", q, p));
	*(struct ns1__maketoResponse*)p = *(struct ns1__maketoResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTempPackage(struct soap *soap, struct ns1__getTempPackage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns1__InterfaceParameter(soap, &a->param);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTempPackage(struct soap *soap, const struct ns1__getTempPackage *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns1__InterfaceParameter(soap, &a->param);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTempPackage(struct soap *soap, const char *tag, int id, const struct ns1__getTempPackage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getTempPackage), type))
		return soap->error;
	if (soap_out_ns1__InterfaceParameter(soap, "param", -1, &a->param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getTempPackage * SOAP_FMAC4 soap_in_ns1__getTempPackage(struct soap *soap, const char *tag, struct ns1__getTempPackage *a, const char *type)
{
	size_t soap_flag_param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getTempPackage *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getTempPackage, sizeof(struct ns1__getTempPackage), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__getTempPackage(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__InterfaceParameter(soap, "param", &a->param, "ns1:InterfaceParameter"))
				{	soap_flag_param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getTempPackage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getTempPackage, 0, sizeof(struct ns1__getTempPackage), 0, soap_copy_ns1__getTempPackage);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_param > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTempPackage(struct soap *soap, const struct ns1__getTempPackage *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getTempPackage);
	if (soap_out_ns1__getTempPackage(soap, tag?tag:"ns1:getTempPackage", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__getTempPackage * SOAP_FMAC4 soap_get_ns1__getTempPackage(struct soap *soap, struct ns1__getTempPackage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getTempPackage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__getTempPackage * SOAP_FMAC2 soap_instantiate_ns1__getTempPackage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getTempPackage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getTempPackage, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__getTempPackage);
		if (size)
			*size = sizeof(struct ns1__getTempPackage);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__getTempPackage, n);
		if (size)
			*size = n * sizeof(struct ns1__getTempPackage);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__getTempPackage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTempPackage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getTempPackage %p -> %p\n", q, p));
	*(struct ns1__getTempPackage*)p = *(struct ns1__getTempPackage*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTempPackageResponse(struct soap *soap, struct ns1__getTempPackageResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfstd__string(soap, &a->ret);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTempPackageResponse(struct soap *soap, const struct ns1__getTempPackageResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTempPackageResponse(struct soap *soap, const char *tag, int id, const struct ns1__getTempPackageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getTempPackageResponse), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getTempPackageResponse * SOAP_FMAC4 soap_in_ns1__getTempPackageResponse(struct soap *soap, const char *tag, struct ns1__getTempPackageResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getTempPackageResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getTempPackageResponse, sizeof(struct ns1__getTempPackageResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__getTempPackageResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "ret", &a->ret, "xsd:string"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getTempPackageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getTempPackageResponse, 0, sizeof(struct ns1__getTempPackageResponse), 0, soap_copy_ns1__getTempPackageResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (a->ret.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTempPackageResponse(struct soap *soap, const struct ns1__getTempPackageResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getTempPackageResponse);
	if (soap_out_ns1__getTempPackageResponse(soap, tag?tag:"ns1:getTempPackageResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__getTempPackageResponse * SOAP_FMAC4 soap_get_ns1__getTempPackageResponse(struct soap *soap, struct ns1__getTempPackageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getTempPackageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__getTempPackageResponse * SOAP_FMAC2 soap_instantiate_ns1__getTempPackageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getTempPackageResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getTempPackageResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__getTempPackageResponse);
		if (size)
			*size = sizeof(struct ns1__getTempPackageResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__getTempPackageResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__getTempPackageResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__getTempPackageResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTempPackageResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getTempPackageResponse %p -> %p\n", q, p));
	*(struct ns1__getTempPackageResponse*)p = *(struct ns1__getTempPackageResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deletePackage(struct soap *soap, struct ns1__deletePackage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns1__InterfaceParameter(soap, &a->param);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deletePackage(struct soap *soap, const struct ns1__deletePackage *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns1__InterfaceParameter(soap, &a->param);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deletePackage(struct soap *soap, const char *tag, int id, const struct ns1__deletePackage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deletePackage), type))
		return soap->error;
	if (soap_out_ns1__InterfaceParameter(soap, "param", -1, &a->param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__deletePackage * SOAP_FMAC4 soap_in_ns1__deletePackage(struct soap *soap, const char *tag, struct ns1__deletePackage *a, const char *type)
{
	size_t soap_flag_param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__deletePackage *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deletePackage, sizeof(struct ns1__deletePackage), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__deletePackage(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__InterfaceParameter(soap, "param", &a->param, "ns1:InterfaceParameter"))
				{	soap_flag_param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__deletePackage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deletePackage, 0, sizeof(struct ns1__deletePackage), 0, soap_copy_ns1__deletePackage);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_param > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deletePackage(struct soap *soap, const struct ns1__deletePackage *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__deletePackage);
	if (soap_out_ns1__deletePackage(soap, tag?tag:"ns1:deletePackage", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__deletePackage * SOAP_FMAC4 soap_get_ns1__deletePackage(struct soap *soap, struct ns1__deletePackage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deletePackage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__deletePackage * SOAP_FMAC2 soap_instantiate_ns1__deletePackage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deletePackage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__deletePackage, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__deletePackage);
		if (size)
			*size = sizeof(struct ns1__deletePackage);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__deletePackage, n);
		if (size)
			*size = n * sizeof(struct ns1__deletePackage);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__deletePackage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deletePackage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__deletePackage %p -> %p\n", q, p));
	*(struct ns1__deletePackage*)p = *(struct ns1__deletePackage*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deletePackageResponse(struct soap *soap, struct ns1__deletePackageResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->ret);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deletePackageResponse(struct soap *soap, const struct ns1__deletePackageResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deletePackageResponse(struct soap *soap, const char *tag, int id, const struct ns1__deletePackageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deletePackageResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__deletePackageResponse * SOAP_FMAC4 soap_in_ns1__deletePackageResponse(struct soap *soap, const char *tag, struct ns1__deletePackageResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__deletePackageResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deletePackageResponse, sizeof(struct ns1__deletePackageResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__deletePackageResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ret", &a->ret, "xsd:boolean"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__deletePackageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deletePackageResponse, 0, sizeof(struct ns1__deletePackageResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ret > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deletePackageResponse(struct soap *soap, const struct ns1__deletePackageResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__deletePackageResponse);
	if (soap_out_ns1__deletePackageResponse(soap, tag?tag:"ns1:deletePackageResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__deletePackageResponse * SOAP_FMAC4 soap_get_ns1__deletePackageResponse(struct soap *soap, struct ns1__deletePackageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deletePackageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__deletePackageResponse * SOAP_FMAC2 soap_instantiate_ns1__deletePackageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deletePackageResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__deletePackageResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__deletePackageResponse);
		if (size)
			*size = sizeof(struct ns1__deletePackageResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__deletePackageResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__deletePackageResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__deletePackageResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deletePackageResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__deletePackageResponse %p -> %p\n", q, p));
	*(struct ns1__deletePackageResponse*)p = *(struct ns1__deletePackageResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUsableSpace(struct soap *soap, struct ns1__getUsableSpace *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns1__InterfaceParameter(soap, &a->param);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUsableSpace(struct soap *soap, const struct ns1__getUsableSpace *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns1__InterfaceParameter(soap, &a->param);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUsableSpace(struct soap *soap, const char *tag, int id, const struct ns1__getUsableSpace *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getUsableSpace), type))
		return soap->error;
	if (soap_out_ns1__InterfaceParameter(soap, "param", -1, &a->param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getUsableSpace * SOAP_FMAC4 soap_in_ns1__getUsableSpace(struct soap *soap, const char *tag, struct ns1__getUsableSpace *a, const char *type)
{
	size_t soap_flag_param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getUsableSpace *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getUsableSpace, sizeof(struct ns1__getUsableSpace), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__getUsableSpace(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__InterfaceParameter(soap, "param", &a->param, "ns1:InterfaceParameter"))
				{	soap_flag_param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getUsableSpace *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getUsableSpace, 0, sizeof(struct ns1__getUsableSpace), 0, soap_copy_ns1__getUsableSpace);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_param > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUsableSpace(struct soap *soap, const struct ns1__getUsableSpace *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getUsableSpace);
	if (soap_out_ns1__getUsableSpace(soap, tag?tag:"ns1:getUsableSpace", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__getUsableSpace * SOAP_FMAC4 soap_get_ns1__getUsableSpace(struct soap *soap, struct ns1__getUsableSpace *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getUsableSpace(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__getUsableSpace * SOAP_FMAC2 soap_instantiate_ns1__getUsableSpace(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getUsableSpace(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getUsableSpace, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__getUsableSpace);
		if (size)
			*size = sizeof(struct ns1__getUsableSpace);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__getUsableSpace, n);
		if (size)
			*size = n * sizeof(struct ns1__getUsableSpace);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__getUsableSpace*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUsableSpace(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getUsableSpace %p -> %p\n", q, p));
	*(struct ns1__getUsableSpace*)p = *(struct ns1__getUsableSpace*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUsableSpaceResponse(struct soap *soap, struct ns1__getUsableSpaceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->ret);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUsableSpaceResponse(struct soap *soap, const struct ns1__getUsableSpaceResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->ret, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUsableSpaceResponse(struct soap *soap, const char *tag, int id, const struct ns1__getUsableSpaceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getUsableSpaceResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getUsableSpaceResponse * SOAP_FMAC4 soap_in_ns1__getUsableSpaceResponse(struct soap *soap, const char *tag, struct ns1__getUsableSpaceResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getUsableSpaceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getUsableSpaceResponse, sizeof(struct ns1__getUsableSpaceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__getUsableSpaceResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ret", &a->ret, "xsd:string"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getUsableSpaceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getUsableSpaceResponse, 0, sizeof(struct ns1__getUsableSpaceResponse), 0, soap_copy_ns1__getUsableSpaceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ret > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUsableSpaceResponse(struct soap *soap, const struct ns1__getUsableSpaceResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__getUsableSpaceResponse);
	if (soap_out_ns1__getUsableSpaceResponse(soap, tag?tag:"ns1:getUsableSpaceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__getUsableSpaceResponse * SOAP_FMAC4 soap_get_ns1__getUsableSpaceResponse(struct soap *soap, struct ns1__getUsableSpaceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getUsableSpaceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__getUsableSpaceResponse * SOAP_FMAC2 soap_instantiate_ns1__getUsableSpaceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getUsableSpaceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__getUsableSpaceResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__getUsableSpaceResponse);
		if (size)
			*size = sizeof(struct ns1__getUsableSpaceResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__getUsableSpaceResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__getUsableSpaceResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__getUsableSpaceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUsableSpaceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__getUsableSpaceResponse %p -> %p\n", q, p));
	*(struct ns1__getUsableSpaceResponse*)p = *(struct ns1__getUsableSpaceResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cutPackage(struct soap *soap, struct ns1__cutPackage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns1__InterfaceParameter(soap, &a->param);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cutPackage(struct soap *soap, const struct ns1__cutPackage *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns1__InterfaceParameter(soap, &a->param);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cutPackage(struct soap *soap, const char *tag, int id, const struct ns1__cutPackage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__cutPackage), type))
		return soap->error;
	if (soap_out_ns1__InterfaceParameter(soap, "param", -1, &a->param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__cutPackage * SOAP_FMAC4 soap_in_ns1__cutPackage(struct soap *soap, const char *tag, struct ns1__cutPackage *a, const char *type)
{
	size_t soap_flag_param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__cutPackage *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__cutPackage, sizeof(struct ns1__cutPackage), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__cutPackage(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__InterfaceParameter(soap, "param", &a->param, "ns1:InterfaceParameter"))
				{	soap_flag_param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__cutPackage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__cutPackage, 0, sizeof(struct ns1__cutPackage), 0, soap_copy_ns1__cutPackage);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_param > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cutPackage(struct soap *soap, const struct ns1__cutPackage *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__cutPackage);
	if (soap_out_ns1__cutPackage(soap, tag?tag:"ns1:cutPackage", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__cutPackage * SOAP_FMAC4 soap_get_ns1__cutPackage(struct soap *soap, struct ns1__cutPackage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__cutPackage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__cutPackage * SOAP_FMAC2 soap_instantiate_ns1__cutPackage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__cutPackage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__cutPackage, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__cutPackage);
		if (size)
			*size = sizeof(struct ns1__cutPackage);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__cutPackage, n);
		if (size)
			*size = n * sizeof(struct ns1__cutPackage);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__cutPackage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cutPackage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__cutPackage %p -> %p\n", q, p));
	*(struct ns1__cutPackage*)p = *(struct ns1__cutPackage*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cutPackageResponse(struct soap *soap, struct ns1__cutPackageResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->ret);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cutPackageResponse(struct soap *soap, const struct ns1__cutPackageResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cutPackageResponse(struct soap *soap, const char *tag, int id, const struct ns1__cutPackageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__cutPackageResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__cutPackageResponse * SOAP_FMAC4 soap_in_ns1__cutPackageResponse(struct soap *soap, const char *tag, struct ns1__cutPackageResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__cutPackageResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__cutPackageResponse, sizeof(struct ns1__cutPackageResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__cutPackageResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ret", &a->ret, "xsd:boolean"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__cutPackageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__cutPackageResponse, 0, sizeof(struct ns1__cutPackageResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ret > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cutPackageResponse(struct soap *soap, const struct ns1__cutPackageResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__cutPackageResponse);
	if (soap_out_ns1__cutPackageResponse(soap, tag?tag:"ns1:cutPackageResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__cutPackageResponse * SOAP_FMAC4 soap_get_ns1__cutPackageResponse(struct soap *soap, struct ns1__cutPackageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__cutPackageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__cutPackageResponse * SOAP_FMAC2 soap_instantiate_ns1__cutPackageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__cutPackageResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__cutPackageResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__cutPackageResponse);
		if (size)
			*size = sizeof(struct ns1__cutPackageResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__cutPackageResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__cutPackageResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__cutPackageResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cutPackageResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__cutPackageResponse %p -> %p\n", q, p));
	*(struct ns1__cutPackageResponse*)p = *(struct ns1__cutPackageResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__transfer(struct soap *soap, struct ns1__transfer *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns1__InterfaceParameter(soap, &a->param);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__transfer(struct soap *soap, const struct ns1__transfer *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns1__InterfaceParameter(soap, &a->param);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__transfer(struct soap *soap, const char *tag, int id, const struct ns1__transfer *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__transfer), type))
		return soap->error;
	if (soap_out_ns1__InterfaceParameter(soap, "param", -1, &a->param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__transfer * SOAP_FMAC4 soap_in_ns1__transfer(struct soap *soap, const char *tag, struct ns1__transfer *a, const char *type)
{
	size_t soap_flag_param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__transfer *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__transfer, sizeof(struct ns1__transfer), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__transfer(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__InterfaceParameter(soap, "param", &a->param, "ns1:InterfaceParameter"))
				{	soap_flag_param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__transfer *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__transfer, 0, sizeof(struct ns1__transfer), 0, soap_copy_ns1__transfer);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_param > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__transfer(struct soap *soap, const struct ns1__transfer *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__transfer);
	if (soap_out_ns1__transfer(soap, tag?tag:"ns1:transfer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__transfer * SOAP_FMAC4 soap_get_ns1__transfer(struct soap *soap, struct ns1__transfer *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__transfer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__transfer * SOAP_FMAC2 soap_instantiate_ns1__transfer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__transfer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__transfer, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__transfer);
		if (size)
			*size = sizeof(struct ns1__transfer);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__transfer, n);
		if (size)
			*size = n * sizeof(struct ns1__transfer);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__transfer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__transfer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__transfer %p -> %p\n", q, p));
	*(struct ns1__transfer*)p = *(struct ns1__transfer*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__transferResponse(struct soap *soap, struct ns1__transferResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->ret);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__transferResponse(struct soap *soap, const struct ns1__transferResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__transferResponse(struct soap *soap, const char *tag, int id, const struct ns1__transferResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__transferResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__transferResponse * SOAP_FMAC4 soap_in_ns1__transferResponse(struct soap *soap, const char *tag, struct ns1__transferResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__transferResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__transferResponse, sizeof(struct ns1__transferResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__transferResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ret", &a->ret, "xsd:boolean"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__transferResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__transferResponse, 0, sizeof(struct ns1__transferResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ret > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__transferResponse(struct soap *soap, const struct ns1__transferResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__transferResponse);
	if (soap_out_ns1__transferResponse(soap, tag?tag:"ns1:transferResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__transferResponse * SOAP_FMAC4 soap_get_ns1__transferResponse(struct soap *soap, struct ns1__transferResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__transferResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__transferResponse * SOAP_FMAC2 soap_instantiate_ns1__transferResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__transferResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__transferResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__transferResponse);
		if (size)
			*size = sizeof(struct ns1__transferResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__transferResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__transferResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__transferResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__transferResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__transferResponse %p -> %p\n", q, p));
	*(struct ns1__transferResponse*)p = *(struct ns1__transferResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__isPackExist(struct soap *soap, struct ns1__isPackExist *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns1__InterfaceParameter(soap, &a->param);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__isPackExist(struct soap *soap, const struct ns1__isPackExist *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns1__InterfaceParameter(soap, &a->param);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__isPackExist(struct soap *soap, const char *tag, int id, const struct ns1__isPackExist *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__isPackExist), type))
		return soap->error;
	if (soap_out_ns1__InterfaceParameter(soap, "param", -1, &a->param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__isPackExist * SOAP_FMAC4 soap_in_ns1__isPackExist(struct soap *soap, const char *tag, struct ns1__isPackExist *a, const char *type)
{
	size_t soap_flag_param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__isPackExist *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__isPackExist, sizeof(struct ns1__isPackExist), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__isPackExist(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__InterfaceParameter(soap, "param", &a->param, "ns1:InterfaceParameter"))
				{	soap_flag_param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__isPackExist *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__isPackExist, 0, sizeof(struct ns1__isPackExist), 0, soap_copy_ns1__isPackExist);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_param > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__isPackExist(struct soap *soap, const struct ns1__isPackExist *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__isPackExist);
	if (soap_out_ns1__isPackExist(soap, tag?tag:"ns1:isPackExist", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__isPackExist * SOAP_FMAC4 soap_get_ns1__isPackExist(struct soap *soap, struct ns1__isPackExist *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__isPackExist(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__isPackExist * SOAP_FMAC2 soap_instantiate_ns1__isPackExist(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__isPackExist(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__isPackExist, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__isPackExist);
		if (size)
			*size = sizeof(struct ns1__isPackExist);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__isPackExist, n);
		if (size)
			*size = n * sizeof(struct ns1__isPackExist);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__isPackExist*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__isPackExist(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__isPackExist %p -> %p\n", q, p));
	*(struct ns1__isPackExist*)p = *(struct ns1__isPackExist*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__isPackExistResponse(struct soap *soap, struct ns1__isPackExistResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->ret);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__isPackExistResponse(struct soap *soap, const struct ns1__isPackExistResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__isPackExistResponse(struct soap *soap, const char *tag, int id, const struct ns1__isPackExistResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__isPackExistResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__isPackExistResponse * SOAP_FMAC4 soap_in_ns1__isPackExistResponse(struct soap *soap, const char *tag, struct ns1__isPackExistResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__isPackExistResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__isPackExistResponse, sizeof(struct ns1__isPackExistResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__isPackExistResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ret", &a->ret, "xsd:boolean"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__isPackExistResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__isPackExistResponse, 0, sizeof(struct ns1__isPackExistResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ret > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__isPackExistResponse(struct soap *soap, const struct ns1__isPackExistResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__isPackExistResponse);
	if (soap_out_ns1__isPackExistResponse(soap, tag?tag:"ns1:isPackExistResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__isPackExistResponse * SOAP_FMAC4 soap_get_ns1__isPackExistResponse(struct soap *soap, struct ns1__isPackExistResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__isPackExistResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__isPackExistResponse * SOAP_FMAC2 soap_instantiate_ns1__isPackExistResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__isPackExistResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__isPackExistResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__isPackExistResponse);
		if (size)
			*size = sizeof(struct ns1__isPackExistResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__isPackExistResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__isPackExistResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__isPackExistResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__isPackExistResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__isPackExistResponse %p -> %p\n", q, p));
	*(struct ns1__isPackExistResponse*)p = *(struct ns1__isPackExistResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InterfaceParameter(struct soap *soap, struct ns1__InterfaceParameter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->uuid);
	soap_default_std__string(soap, &a->ftpUserName);
	soap_default_std__string(soap, &a->ftpIP);
	soap_default_std__string(soap, &a->ftpPassWord);
	soap_default_std__string(soap, &a->ftpDirName);
	soap_default_std__string(soap, &a->torrentP2pPath);
	soap_default_std__string(soap, &a->packageName);
	soap_default_std__string(soap, &a->packageSize);
	soap_default_std__string(soap, &a->taskType);
	soap_default_std__string(soap, &a->transferTempPath);
	soap_default_std__string(soap, &a->transferStorePath);
	soap_default_std__string(soap, &a->transferTorrentPath);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InterfaceParameter(struct soap *soap, const struct ns1__InterfaceParameter *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->uuid, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->uuid);
	soap_embedded(soap, &a->ftpUserName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->ftpUserName);
	soap_embedded(soap, &a->ftpIP, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->ftpIP);
	soap_embedded(soap, &a->ftpPassWord, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->ftpPassWord);
	soap_embedded(soap, &a->ftpDirName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->ftpDirName);
	soap_embedded(soap, &a->torrentP2pPath, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->torrentP2pPath);
	soap_embedded(soap, &a->packageName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->packageName);
	soap_embedded(soap, &a->packageSize, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->packageSize);
	soap_embedded(soap, &a->taskType, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->taskType);
	soap_embedded(soap, &a->transferTempPath, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->transferTempPath);
	soap_embedded(soap, &a->transferStorePath, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->transferStorePath);
	soap_embedded(soap, &a->transferTorrentPath, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->transferTorrentPath);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InterfaceParameter(struct soap *soap, const char *tag, int id, const struct ns1__InterfaceParameter *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__InterfaceParameter), type))
		return soap->error;
	if (soap_out_std__string(soap, "uuid", -1, &a->uuid, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ftpUserName", -1, &a->ftpUserName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ftpIP", -1, &a->ftpIP, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ftpPassWord", -1, &a->ftpPassWord, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ftpDirName", -1, &a->ftpDirName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "torrentP2pPath", -1, &a->torrentP2pPath, ""))
		return soap->error;
	if (soap_out_std__string(soap, "packageName", -1, &a->packageName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "packageSize", -1, &a->packageSize, ""))
		return soap->error;
	if (soap_out_std__string(soap, "taskType", -1, &a->taskType, ""))
		return soap->error;
	if (soap_out_std__string(soap, "transferTempPath", -1, &a->transferTempPath, ""))
		return soap->error;
	if (soap_out_std__string(soap, "transferStorePath", -1, &a->transferStorePath, ""))
		return soap->error;
	if (soap_out_std__string(soap, "transferTorrentPath", -1, &a->transferTorrentPath, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__InterfaceParameter * SOAP_FMAC4 soap_in_ns1__InterfaceParameter(struct soap *soap, const char *tag, struct ns1__InterfaceParameter *a, const char *type)
{
	size_t soap_flag_uuid = 1;
	size_t soap_flag_ftpUserName = 1;
	size_t soap_flag_ftpIP = 1;
	size_t soap_flag_ftpPassWord = 1;
	size_t soap_flag_ftpDirName = 1;
	size_t soap_flag_torrentP2pPath = 1;
	size_t soap_flag_packageName = 1;
	size_t soap_flag_packageSize = 1;
	size_t soap_flag_taskType = 1;
	size_t soap_flag_transferTempPath = 1;
	size_t soap_flag_transferStorePath = 1;
	size_t soap_flag_transferTorrentPath = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__InterfaceParameter *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__InterfaceParameter, sizeof(struct ns1__InterfaceParameter), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__InterfaceParameter(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uuid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "uuid", &a->uuid, "xsd:string"))
				{	soap_flag_uuid--;
					continue;
				}
			if (soap_flag_ftpUserName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ftpUserName", &a->ftpUserName, "xsd:string"))
				{	soap_flag_ftpUserName--;
					continue;
				}
			if (soap_flag_ftpIP && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ftpIP", &a->ftpIP, "xsd:string"))
				{	soap_flag_ftpIP--;
					continue;
				}
			if (soap_flag_ftpPassWord && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ftpPassWord", &a->ftpPassWord, "xsd:string"))
				{	soap_flag_ftpPassWord--;
					continue;
				}
			if (soap_flag_ftpDirName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ftpDirName", &a->ftpDirName, "xsd:string"))
				{	soap_flag_ftpDirName--;
					continue;
				}
			if (soap_flag_torrentP2pPath && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "torrentP2pPath", &a->torrentP2pPath, "xsd:string"))
				{	soap_flag_torrentP2pPath--;
					continue;
				}
			if (soap_flag_packageName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "packageName", &a->packageName, "xsd:string"))
				{	soap_flag_packageName--;
					continue;
				}
			if (soap_flag_packageSize && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "packageSize", &a->packageSize, "xsd:string"))
				{	soap_flag_packageSize--;
					continue;
				}
			if (soap_flag_taskType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "taskType", &a->taskType, "xsd:string"))
				{	soap_flag_taskType--;
					continue;
				}
			if (soap_flag_transferTempPath && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "transferTempPath", &a->transferTempPath, "xsd:string"))
				{	soap_flag_transferTempPath--;
					continue;
				}
			if (soap_flag_transferStorePath && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "transferStorePath", &a->transferStorePath, "xsd:string"))
				{	soap_flag_transferStorePath--;
					continue;
				}
			if (soap_flag_transferTorrentPath && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "transferTorrentPath", &a->transferTorrentPath, "xsd:string"))
				{	soap_flag_transferTorrentPath--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__InterfaceParameter *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__InterfaceParameter, 0, sizeof(struct ns1__InterfaceParameter), 0, soap_copy_ns1__InterfaceParameter);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_uuid > 0 || soap_flag_ftpUserName > 0 || soap_flag_ftpIP > 0 || soap_flag_ftpPassWord > 0 || soap_flag_ftpDirName > 0 || soap_flag_torrentP2pPath > 0 || soap_flag_packageName > 0 || soap_flag_packageSize > 0 || soap_flag_taskType > 0 || soap_flag_transferTempPath > 0 || soap_flag_transferStorePath > 0 || soap_flag_transferTorrentPath > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InterfaceParameter(struct soap *soap, const struct ns1__InterfaceParameter *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__InterfaceParameter);
	if (soap_out_ns1__InterfaceParameter(soap, tag?tag:"ns1:InterfaceParameter", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__InterfaceParameter * SOAP_FMAC4 soap_get_ns1__InterfaceParameter(struct soap *soap, struct ns1__InterfaceParameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__InterfaceParameter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__InterfaceParameter * SOAP_FMAC2 soap_instantiate_ns1__InterfaceParameter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__InterfaceParameter(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__InterfaceParameter, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__InterfaceParameter);
		if (size)
			*size = sizeof(struct ns1__InterfaceParameter);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__InterfaceParameter, n);
		if (size)
			*size = n * sizeof(struct ns1__InterfaceParameter);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__InterfaceParameter*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__InterfaceParameter(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__InterfaceParameter %p -> %p\n", q, p));
	*(struct ns1__InterfaceParameter*)p = *(struct ns1__InterfaceParameter*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns21__addSendinfo(struct soap *soap, struct __ns21__addSendinfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns21__addSendinfo_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns21__addSendinfo(struct soap *soap, const struct __ns21__addSendinfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons21__addSendinfo(soap, &a->ns21__addSendinfo_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns21__addSendinfo(struct soap *soap, const char *tag, int id, const struct __ns21__addSendinfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons21__addSendinfo(soap, "ns21:addSendinfo", -1, &a->ns21__addSendinfo_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__addSendinfo * SOAP_FMAC4 soap_in___ns21__addSendinfo(struct soap *soap, const char *tag, struct __ns21__addSendinfo *a, const char *type)
{
	size_t soap_flag_ns21__addSendinfo_ = 1;
	short soap_flag;
	a = (struct __ns21__addSendinfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns21__addSendinfo, sizeof(struct __ns21__addSendinfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns21__addSendinfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns21__addSendinfo_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons21__addSendinfo(soap, "ns21:addSendinfo", &a->ns21__addSendinfo_, "ns21:addSendinfo"))
				{	soap_flag_ns21__addSendinfo_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns21__addSendinfo(struct soap *soap, const struct __ns21__addSendinfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns21__addSendinfo(soap, tag?tag:"-ns21:addSendinfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__addSendinfo * SOAP_FMAC4 soap_get___ns21__addSendinfo(struct soap *soap, struct __ns21__addSendinfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns21__addSendinfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns21__addSendinfo * SOAP_FMAC2 soap_instantiate___ns21__addSendinfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns21__addSendinfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns21__addSendinfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns21__addSendinfo);
		if (size)
			*size = sizeof(struct __ns21__addSendinfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns21__addSendinfo, n);
		if (size)
			*size = n * sizeof(struct __ns21__addSendinfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns21__addSendinfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns21__addSendinfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns21__addSendinfo %p -> %p\n", q, p));
	*(struct __ns21__addSendinfo*)p = *(struct __ns21__addSendinfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns21__addNode(struct soap *soap, struct __ns21__addNode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns21__addNode_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns21__addNode(struct soap *soap, const struct __ns21__addNode *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons21__addNode(soap, &a->ns21__addNode_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns21__addNode(struct soap *soap, const char *tag, int id, const struct __ns21__addNode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons21__addNode(soap, "ns21:addNode", -1, &a->ns21__addNode_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__addNode * SOAP_FMAC4 soap_in___ns21__addNode(struct soap *soap, const char *tag, struct __ns21__addNode *a, const char *type)
{
	size_t soap_flag_ns21__addNode_ = 1;
	short soap_flag;
	a = (struct __ns21__addNode *)soap_id_enter(soap, "", a, SOAP_TYPE___ns21__addNode, sizeof(struct __ns21__addNode), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns21__addNode(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns21__addNode_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons21__addNode(soap, "ns21:addNode", &a->ns21__addNode_, "ns21:addNode"))
				{	soap_flag_ns21__addNode_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns21__addNode(struct soap *soap, const struct __ns21__addNode *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns21__addNode(soap, tag?tag:"-ns21:addNode", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__addNode * SOAP_FMAC4 soap_get___ns21__addNode(struct soap *soap, struct __ns21__addNode *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns21__addNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns21__addNode * SOAP_FMAC2 soap_instantiate___ns21__addNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns21__addNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns21__addNode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns21__addNode);
		if (size)
			*size = sizeof(struct __ns21__addNode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns21__addNode, n);
		if (size)
			*size = n * sizeof(struct __ns21__addNode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns21__addNode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns21__addNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns21__addNode %p -> %p\n", q, p));
	*(struct __ns21__addNode*)p = *(struct __ns21__addNode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns21__dispense(struct soap *soap, struct __ns21__dispense *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns21__dispense_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns21__dispense(struct soap *soap, const struct __ns21__dispense *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons21__dispense(soap, &a->ns21__dispense_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns21__dispense(struct soap *soap, const char *tag, int id, const struct __ns21__dispense *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons21__dispense(soap, "ns21:dispense", -1, &a->ns21__dispense_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__dispense * SOAP_FMAC4 soap_in___ns21__dispense(struct soap *soap, const char *tag, struct __ns21__dispense *a, const char *type)
{
	size_t soap_flag_ns21__dispense_ = 1;
	short soap_flag;
	a = (struct __ns21__dispense *)soap_id_enter(soap, "", a, SOAP_TYPE___ns21__dispense, sizeof(struct __ns21__dispense), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns21__dispense(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns21__dispense_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons21__dispense(soap, "ns21:dispense", &a->ns21__dispense_, "ns21:dispense"))
				{	soap_flag_ns21__dispense_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns21__dispense(struct soap *soap, const struct __ns21__dispense *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns21__dispense(soap, tag?tag:"-ns21:dispense", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__dispense * SOAP_FMAC4 soap_get___ns21__dispense(struct soap *soap, struct __ns21__dispense *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns21__dispense(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns21__dispense * SOAP_FMAC2 soap_instantiate___ns21__dispense(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns21__dispense(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns21__dispense, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns21__dispense);
		if (size)
			*size = sizeof(struct __ns21__dispense);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns21__dispense, n);
		if (size)
			*size = n * sizeof(struct __ns21__dispense);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns21__dispense*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns21__dispense(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns21__dispense %p -> %p\n", q, p));
	*(struct __ns21__dispense*)p = *(struct __ns21__dispense*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns21__getSendinfo(struct soap *soap, struct __ns21__getSendinfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns21__getSendinfo_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns21__getSendinfo(struct soap *soap, const struct __ns21__getSendinfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons21__getSendinfo(soap, &a->ns21__getSendinfo_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns21__getSendinfo(struct soap *soap, const char *tag, int id, const struct __ns21__getSendinfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons21__getSendinfo(soap, "ns21:getSendinfo", -1, &a->ns21__getSendinfo_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__getSendinfo * SOAP_FMAC4 soap_in___ns21__getSendinfo(struct soap *soap, const char *tag, struct __ns21__getSendinfo *a, const char *type)
{
	size_t soap_flag_ns21__getSendinfo_ = 1;
	short soap_flag;
	a = (struct __ns21__getSendinfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns21__getSendinfo, sizeof(struct __ns21__getSendinfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns21__getSendinfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns21__getSendinfo_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons21__getSendinfo(soap, "ns21:getSendinfo", &a->ns21__getSendinfo_, "ns21:getSendinfo"))
				{	soap_flag_ns21__getSendinfo_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns21__getSendinfo(struct soap *soap, const struct __ns21__getSendinfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns21__getSendinfo(soap, tag?tag:"-ns21:getSendinfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__getSendinfo * SOAP_FMAC4 soap_get___ns21__getSendinfo(struct soap *soap, struct __ns21__getSendinfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns21__getSendinfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns21__getSendinfo * SOAP_FMAC2 soap_instantiate___ns21__getSendinfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns21__getSendinfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns21__getSendinfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns21__getSendinfo);
		if (size)
			*size = sizeof(struct __ns21__getSendinfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns21__getSendinfo, n);
		if (size)
			*size = n * sizeof(struct __ns21__getSendinfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns21__getSendinfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns21__getSendinfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns21__getSendinfo %p -> %p\n", q, p));
	*(struct __ns21__getSendinfo*)p = *(struct __ns21__getSendinfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns21__TransferResultSecond(struct soap *soap, struct __ns21__TransferResultSecond *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns21__TransferResultSecond_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns21__TransferResultSecond(struct soap *soap, const struct __ns21__TransferResultSecond *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons21__TransferResultSecond(soap, &a->ns21__TransferResultSecond_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns21__TransferResultSecond(struct soap *soap, const char *tag, int id, const struct __ns21__TransferResultSecond *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons21__TransferResultSecond(soap, "ns21:TransferResultSecond", -1, &a->ns21__TransferResultSecond_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__TransferResultSecond * SOAP_FMAC4 soap_in___ns21__TransferResultSecond(struct soap *soap, const char *tag, struct __ns21__TransferResultSecond *a, const char *type)
{
	size_t soap_flag_ns21__TransferResultSecond_ = 1;
	short soap_flag;
	a = (struct __ns21__TransferResultSecond *)soap_id_enter(soap, "", a, SOAP_TYPE___ns21__TransferResultSecond, sizeof(struct __ns21__TransferResultSecond), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns21__TransferResultSecond(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns21__TransferResultSecond_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons21__TransferResultSecond(soap, "ns21:TransferResultSecond", &a->ns21__TransferResultSecond_, "ns21:TransferResultSecond"))
				{	soap_flag_ns21__TransferResultSecond_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns21__TransferResultSecond(struct soap *soap, const struct __ns21__TransferResultSecond *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns21__TransferResultSecond(soap, tag?tag:"-ns21:TransferResultSecond", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__TransferResultSecond * SOAP_FMAC4 soap_get___ns21__TransferResultSecond(struct soap *soap, struct __ns21__TransferResultSecond *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns21__TransferResultSecond(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns21__TransferResultSecond * SOAP_FMAC2 soap_instantiate___ns21__TransferResultSecond(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns21__TransferResultSecond(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns21__TransferResultSecond, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns21__TransferResultSecond);
		if (size)
			*size = sizeof(struct __ns21__TransferResultSecond);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns21__TransferResultSecond, n);
		if (size)
			*size = n * sizeof(struct __ns21__TransferResultSecond);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns21__TransferResultSecond*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns21__TransferResultSecond(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns21__TransferResultSecond %p -> %p\n", q, p));
	*(struct __ns21__TransferResultSecond*)p = *(struct __ns21__TransferResultSecond*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns21__transferResult(struct soap *soap, struct __ns21__transferResult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns21__transferResult_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns21__transferResult(struct soap *soap, const struct __ns21__transferResult *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons21__transferResult(soap, &a->ns21__transferResult_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns21__transferResult(struct soap *soap, const char *tag, int id, const struct __ns21__transferResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTons21__transferResult(soap, "ns21:transferResult", -1, &a->ns21__transferResult_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__transferResult * SOAP_FMAC4 soap_in___ns21__transferResult(struct soap *soap, const char *tag, struct __ns21__transferResult *a, const char *type)
{
	size_t soap_flag_ns21__transferResult_ = 1;
	short soap_flag;
	a = (struct __ns21__transferResult *)soap_id_enter(soap, "", a, SOAP_TYPE___ns21__transferResult, sizeof(struct __ns21__transferResult), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns21__transferResult(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns21__transferResult_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons21__transferResult(soap, "ns21:transferResult", &a->ns21__transferResult_, "ns21:transferResult"))
				{	soap_flag_ns21__transferResult_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns21__transferResult(struct soap *soap, const struct __ns21__transferResult *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns21__transferResult(soap, tag?tag:"-ns21:transferResult", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns21__transferResult * SOAP_FMAC4 soap_get___ns21__transferResult(struct soap *soap, struct __ns21__transferResult *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns21__transferResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns21__transferResult * SOAP_FMAC2 soap_instantiate___ns21__transferResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns21__transferResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns21__transferResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns21__transferResult);
		if (size)
			*size = sizeof(struct __ns21__transferResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns21__transferResult, n);
		if (size)
			*size = n * sizeof(struct __ns21__transferResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns21__transferResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns21__transferResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns21__transferResult %p -> %p\n", q, p));
	*(struct __ns21__transferResult*)p = *(struct __ns21__transferResult*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__addSendinfoResponse(struct soap *soap, ns21__addSendinfoResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__addSendinfoResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__addSendinfoResponse(struct soap *soap, const char *tag, int id, ns21__addSendinfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__addSendinfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__addSendinfoResponse ** SOAP_FMAC4 soap_in_PointerTons21__addSendinfoResponse(struct soap *soap, const char *tag, ns21__addSendinfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__addSendinfoResponse **)soap_malloc(soap, sizeof(ns21__addSendinfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__addSendinfoResponse *)soap_instantiate_ns21__addSendinfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__addSendinfoResponse ** p = (ns21__addSendinfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__addSendinfoResponse, sizeof(ns21__addSendinfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__addSendinfoResponse(struct soap *soap, ns21__addSendinfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__addSendinfoResponse);
	if (soap_out_PointerTons21__addSendinfoResponse(soap, tag?tag:"ns21:addSendinfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__addSendinfoResponse ** SOAP_FMAC4 soap_get_PointerTons21__addSendinfoResponse(struct soap *soap, ns21__addSendinfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__addSendinfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__addSendinfo(struct soap *soap, ns21__addSendinfo *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__addSendinfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__addSendinfo(struct soap *soap, const char *tag, int id, ns21__addSendinfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__addSendinfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__addSendinfo ** SOAP_FMAC4 soap_in_PointerTons21__addSendinfo(struct soap *soap, const char *tag, ns21__addSendinfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__addSendinfo **)soap_malloc(soap, sizeof(ns21__addSendinfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__addSendinfo *)soap_instantiate_ns21__addSendinfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__addSendinfo ** p = (ns21__addSendinfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__addSendinfo, sizeof(ns21__addSendinfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__addSendinfo(struct soap *soap, ns21__addSendinfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__addSendinfo);
	if (soap_out_PointerTons21__addSendinfo(soap, tag?tag:"ns21:addSendinfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__addSendinfo ** SOAP_FMAC4 soap_get_PointerTons21__addSendinfo(struct soap *soap, ns21__addSendinfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__addSendinfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__addNodeResponse(struct soap *soap, ns21__addNodeResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__addNodeResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__addNodeResponse(struct soap *soap, const char *tag, int id, ns21__addNodeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__addNodeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__addNodeResponse ** SOAP_FMAC4 soap_in_PointerTons21__addNodeResponse(struct soap *soap, const char *tag, ns21__addNodeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__addNodeResponse **)soap_malloc(soap, sizeof(ns21__addNodeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__addNodeResponse *)soap_instantiate_ns21__addNodeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__addNodeResponse ** p = (ns21__addNodeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__addNodeResponse, sizeof(ns21__addNodeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__addNodeResponse(struct soap *soap, ns21__addNodeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__addNodeResponse);
	if (soap_out_PointerTons21__addNodeResponse(soap, tag?tag:"ns21:addNodeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__addNodeResponse ** SOAP_FMAC4 soap_get_PointerTons21__addNodeResponse(struct soap *soap, ns21__addNodeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__addNodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__addNode(struct soap *soap, ns21__addNode *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__addNode))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__addNode(struct soap *soap, const char *tag, int id, ns21__addNode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__addNode);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__addNode ** SOAP_FMAC4 soap_in_PointerTons21__addNode(struct soap *soap, const char *tag, ns21__addNode **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__addNode **)soap_malloc(soap, sizeof(ns21__addNode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__addNode *)soap_instantiate_ns21__addNode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__addNode ** p = (ns21__addNode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__addNode, sizeof(ns21__addNode), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__addNode(struct soap *soap, ns21__addNode *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__addNode);
	if (soap_out_PointerTons21__addNode(soap, tag?tag:"ns21:addNode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__addNode ** SOAP_FMAC4 soap_get_PointerTons21__addNode(struct soap *soap, ns21__addNode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__addNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__dispenseResponse(struct soap *soap, ns21__dispenseResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__dispenseResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__dispenseResponse(struct soap *soap, const char *tag, int id, ns21__dispenseResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__dispenseResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__dispenseResponse ** SOAP_FMAC4 soap_in_PointerTons21__dispenseResponse(struct soap *soap, const char *tag, ns21__dispenseResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__dispenseResponse **)soap_malloc(soap, sizeof(ns21__dispenseResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__dispenseResponse *)soap_instantiate_ns21__dispenseResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__dispenseResponse ** p = (ns21__dispenseResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__dispenseResponse, sizeof(ns21__dispenseResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__dispenseResponse(struct soap *soap, ns21__dispenseResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__dispenseResponse);
	if (soap_out_PointerTons21__dispenseResponse(soap, tag?tag:"ns21:dispenseResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__dispenseResponse ** SOAP_FMAC4 soap_get_PointerTons21__dispenseResponse(struct soap *soap, ns21__dispenseResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__dispenseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__dispense(struct soap *soap, ns21__dispense *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__dispense))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__dispense(struct soap *soap, const char *tag, int id, ns21__dispense *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__dispense);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__dispense ** SOAP_FMAC4 soap_in_PointerTons21__dispense(struct soap *soap, const char *tag, ns21__dispense **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__dispense **)soap_malloc(soap, sizeof(ns21__dispense *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__dispense *)soap_instantiate_ns21__dispense(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__dispense ** p = (ns21__dispense **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__dispense, sizeof(ns21__dispense), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__dispense(struct soap *soap, ns21__dispense *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__dispense);
	if (soap_out_PointerTons21__dispense(soap, tag?tag:"ns21:dispense", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__dispense ** SOAP_FMAC4 soap_get_PointerTons21__dispense(struct soap *soap, ns21__dispense **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__dispense(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__getSendinfoResponse(struct soap *soap, ns21__getSendinfoResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__getSendinfoResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__getSendinfoResponse(struct soap *soap, const char *tag, int id, ns21__getSendinfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__getSendinfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__getSendinfoResponse ** SOAP_FMAC4 soap_in_PointerTons21__getSendinfoResponse(struct soap *soap, const char *tag, ns21__getSendinfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__getSendinfoResponse **)soap_malloc(soap, sizeof(ns21__getSendinfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__getSendinfoResponse *)soap_instantiate_ns21__getSendinfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__getSendinfoResponse ** p = (ns21__getSendinfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__getSendinfoResponse, sizeof(ns21__getSendinfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__getSendinfoResponse(struct soap *soap, ns21__getSendinfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__getSendinfoResponse);
	if (soap_out_PointerTons21__getSendinfoResponse(soap, tag?tag:"ns21:getSendinfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__getSendinfoResponse ** SOAP_FMAC4 soap_get_PointerTons21__getSendinfoResponse(struct soap *soap, ns21__getSendinfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__getSendinfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__getSendinfo(struct soap *soap, ns21__getSendinfo *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__getSendinfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__getSendinfo(struct soap *soap, const char *tag, int id, ns21__getSendinfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__getSendinfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__getSendinfo ** SOAP_FMAC4 soap_in_PointerTons21__getSendinfo(struct soap *soap, const char *tag, ns21__getSendinfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__getSendinfo **)soap_malloc(soap, sizeof(ns21__getSendinfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__getSendinfo *)soap_instantiate_ns21__getSendinfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__getSendinfo ** p = (ns21__getSendinfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__getSendinfo, sizeof(ns21__getSendinfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__getSendinfo(struct soap *soap, ns21__getSendinfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__getSendinfo);
	if (soap_out_PointerTons21__getSendinfo(soap, tag?tag:"ns21:getSendinfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__getSendinfo ** SOAP_FMAC4 soap_get_PointerTons21__getSendinfo(struct soap *soap, ns21__getSendinfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__getSendinfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__TransferResultSecondResponse(struct soap *soap, ns21__TransferResultSecondResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__TransferResultSecondResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__TransferResultSecondResponse(struct soap *soap, const char *tag, int id, ns21__TransferResultSecondResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__TransferResultSecondResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__TransferResultSecondResponse ** SOAP_FMAC4 soap_in_PointerTons21__TransferResultSecondResponse(struct soap *soap, const char *tag, ns21__TransferResultSecondResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__TransferResultSecondResponse **)soap_malloc(soap, sizeof(ns21__TransferResultSecondResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__TransferResultSecondResponse *)soap_instantiate_ns21__TransferResultSecondResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__TransferResultSecondResponse ** p = (ns21__TransferResultSecondResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__TransferResultSecondResponse, sizeof(ns21__TransferResultSecondResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__TransferResultSecondResponse(struct soap *soap, ns21__TransferResultSecondResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__TransferResultSecondResponse);
	if (soap_out_PointerTons21__TransferResultSecondResponse(soap, tag?tag:"ns21:TransferResultSecondResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__TransferResultSecondResponse ** SOAP_FMAC4 soap_get_PointerTons21__TransferResultSecondResponse(struct soap *soap, ns21__TransferResultSecondResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__TransferResultSecondResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__TransferResultSecond(struct soap *soap, ns21__TransferResultSecond *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__TransferResultSecond))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__TransferResultSecond(struct soap *soap, const char *tag, int id, ns21__TransferResultSecond *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__TransferResultSecond);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__TransferResultSecond ** SOAP_FMAC4 soap_in_PointerTons21__TransferResultSecond(struct soap *soap, const char *tag, ns21__TransferResultSecond **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__TransferResultSecond **)soap_malloc(soap, sizeof(ns21__TransferResultSecond *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__TransferResultSecond *)soap_instantiate_ns21__TransferResultSecond(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__TransferResultSecond ** p = (ns21__TransferResultSecond **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__TransferResultSecond, sizeof(ns21__TransferResultSecond), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__TransferResultSecond(struct soap *soap, ns21__TransferResultSecond *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__TransferResultSecond);
	if (soap_out_PointerTons21__TransferResultSecond(soap, tag?tag:"ns21:TransferResultSecond", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__TransferResultSecond ** SOAP_FMAC4 soap_get_PointerTons21__TransferResultSecond(struct soap *soap, ns21__TransferResultSecond **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__TransferResultSecond(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__transferResultResponse(struct soap *soap, ns21__transferResultResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__transferResultResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__transferResultResponse(struct soap *soap, const char *tag, int id, ns21__transferResultResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__transferResultResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__transferResultResponse ** SOAP_FMAC4 soap_in_PointerTons21__transferResultResponse(struct soap *soap, const char *tag, ns21__transferResultResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__transferResultResponse **)soap_malloc(soap, sizeof(ns21__transferResultResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__transferResultResponse *)soap_instantiate_ns21__transferResultResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__transferResultResponse ** p = (ns21__transferResultResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__transferResultResponse, sizeof(ns21__transferResultResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__transferResultResponse(struct soap *soap, ns21__transferResultResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__transferResultResponse);
	if (soap_out_PointerTons21__transferResultResponse(soap, tag?tag:"ns21:transferResultResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__transferResultResponse ** SOAP_FMAC4 soap_get_PointerTons21__transferResultResponse(struct soap *soap, ns21__transferResultResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__transferResultResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__transferResult(struct soap *soap, ns21__transferResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__transferResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__transferResult(struct soap *soap, const char *tag, int id, ns21__transferResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__transferResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__transferResult ** SOAP_FMAC4 soap_in_PointerTons21__transferResult(struct soap *soap, const char *tag, ns21__transferResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__transferResult **)soap_malloc(soap, sizeof(ns21__transferResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__transferResult *)soap_instantiate_ns21__transferResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__transferResult ** p = (ns21__transferResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__transferResult, sizeof(ns21__transferResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__transferResult(struct soap *soap, ns21__transferResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__transferResult);
	if (soap_out_PointerTons21__transferResult(soap, tag?tag:"ns21:transferResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__transferResult ** SOAP_FMAC4 soap_get_PointerTons21__transferResult(struct soap *soap, ns21__transferResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__transferResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__WNode(struct soap *soap, ns21__WNode *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__WNode))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__WNode(struct soap *soap, const char *tag, int id, ns21__WNode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__WNode);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__WNode ** SOAP_FMAC4 soap_in_PointerTons21__WNode(struct soap *soap, const char *tag, ns21__WNode **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__WNode **)soap_malloc(soap, sizeof(ns21__WNode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__WNode *)soap_instantiate_ns21__WNode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__WNode ** p = (ns21__WNode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__WNode, sizeof(ns21__WNode), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__WNode(struct soap *soap, ns21__WNode *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__WNode);
	if (soap_out_PointerTons21__WNode(soap, tag?tag:"ns21:WNode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__WNode ** SOAP_FMAC4 soap_get_PointerTons21__WNode(struct soap *soap, ns21__WNode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__WNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__PackInfo(struct soap *soap, ns21__PackInfo *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__PackInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__PackInfo(struct soap *soap, const char *tag, int id, ns21__PackInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__PackInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__PackInfo ** SOAP_FMAC4 soap_in_PointerTons21__PackInfo(struct soap *soap, const char *tag, ns21__PackInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__PackInfo **)soap_malloc(soap, sizeof(ns21__PackInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__PackInfo *)soap_instantiate_ns21__PackInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__PackInfo ** p = (ns21__PackInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__PackInfo, sizeof(ns21__PackInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__PackInfo(struct soap *soap, ns21__PackInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__PackInfo);
	if (soap_out_PointerTons21__PackInfo(soap, tag?tag:"ns21:PackInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__PackInfo ** SOAP_FMAC4 soap_get_PointerTons21__PackInfo(struct soap *soap, ns21__PackInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__PackInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons21__SendinfoTask(struct soap *soap, ns21__SendinfoTask *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns21__SendinfoTask))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons21__SendinfoTask(struct soap *soap, const char *tag, int id, ns21__SendinfoTask *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns21__SendinfoTask);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns21__SendinfoTask ** SOAP_FMAC4 soap_in_PointerTons21__SendinfoTask(struct soap *soap, const char *tag, ns21__SendinfoTask **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns21__SendinfoTask **)soap_malloc(soap, sizeof(ns21__SendinfoTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns21__SendinfoTask *)soap_instantiate_ns21__SendinfoTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns21__SendinfoTask ** p = (ns21__SendinfoTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns21__SendinfoTask, sizeof(ns21__SendinfoTask), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons21__SendinfoTask(struct soap *soap, ns21__SendinfoTask *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons21__SendinfoTask);
	if (soap_out_PointerTons21__SendinfoTask(soap, tag?tag:"ns21:SendinfoTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns21__SendinfoTask ** SOAP_FMAC4 soap_get_PointerTons21__SendinfoTask(struct soap *soap, ns21__SendinfoTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons21__SendinfoTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	std::string n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_std__string(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<std::string >, n);
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons21__SendinfoTask(struct soap *soap, std::vector<ns21__SendinfoTask * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons21__SendinfoTask(struct soap *soap, const std::vector<ns21__SendinfoTask * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns21__SendinfoTask * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons21__SendinfoTask(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons21__SendinfoTask(struct soap *soap, const char *tag, int id, const std::vector<ns21__SendinfoTask * >*a, const char *type)
{
	for (std::vector<ns21__SendinfoTask * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons21__SendinfoTask(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns21__SendinfoTask * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons21__SendinfoTask(struct soap *soap, const char *tag, std::vector<ns21__SendinfoTask * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns21__SendinfoTask *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns21__SendinfoTask, SOAP_TYPE_std__vectorTemplateOfPointerTons21__SendinfoTask, sizeof(ns21__SendinfoTask), 1))
				break;
			if (!soap_in_PointerTons21__SendinfoTask(soap, tag, NULL, "ns21:SendinfoTask"))
				break;
		}
		else if (!soap_in_PointerTons21__SendinfoTask(soap, tag, &n, "ns21:SendinfoTask"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons21__SendinfoTask(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns21__SendinfoTask * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons21__SendinfoTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons21__SendinfoTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons21__SendinfoTask, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns21__SendinfoTask * >);
		if (size)
			*size = sizeof(std::vector<ns21__SendinfoTask * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns21__SendinfoTask * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns21__SendinfoTask * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns21__SendinfoTask * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons21__SendinfoTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns21__SendinfoTask * > %p -> %p\n", q, p));
	*(std::vector<ns21__SendinfoTask * >*)p = *(std::vector<ns21__SendinfoTask * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
